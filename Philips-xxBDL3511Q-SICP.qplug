-- Information block for the plugin
PluginInfo = {
  Name = "Philips~Display (SICP Protocol v2.11)", -- Name of the plugin
  Version = "1.0", -- Current plugin version
  Id = "qsysc.Philips.Displays SICP Protocol v2.11", -- Unique identifier for the plugin. Must not conflict with other installed plugins
  Description = "Plugin for control of Philips Displays using the SICP Protocol.", -- A brief description of the plugin
  BuildVersion = "0.0.0.0", -- Current code iteration tracking
  Author = "Glen Gorton", -- Name or Contact Info of the author
  Manufacturer = "Philips", -- Name of manufacturer the product the plugin integrates
  -- Model = "", -- Model name of the product the plugin integrates
  -- IsManaged = true, -- Add the plugin to the managed inventory of the design
  -- Type = "", -- Reflect reporting type
  ShowDebug = true,
}

width = 350 -- scalable plugin width
control_depth = 16 -- scalable control depth
control_gap = 3 -- vertical space between controls

Colors = {
    none = {0, 0, 0, 0},
    primary = {212, 202, 226},
    secondary = {51, 51, 51},
    heading = {50, 50, 50},
    label = {50, 50, 50},
    stroke = {51, 51, 51},
    black = {51, 51, 51},
    navy = {15, 63, 106},
    lightblue = {143, 197, 247},
    darkgrey = {58,58,58},
    lightgrey = {204,204,204},
    philipsblue = {11, 94, 215},
    white = {255, 255, 255}
}

Sizes = {
    ["Button"] = {36, control_depth},
    ["Text"] = {(width - 30) / 2, control_depth},
    ["Status"] = {width - 30, (control_depth * 2) + (control_gap * 1)},
    ["LED"] = {16, control_depth},
    ["ListBox"] = {width - 30, (control_depth * 8) + (control_gap * 9)},
    ["Image"] = {width - 30, (control_depth * 6) + (control_gap * 5)}
}

Master_Object = {{

    ["PageName"] = "Dashboard",

    ["Groupings"] = {{
        ["Name"] = "Status",
        ["Depth"] = 16,
        ["Controls"] = {{
            Name = "Status",
            PrettyName = "Dashboard~Status",
            Label = "Status",
            ControlType = "Indicator",
            IndicatorType = "Status",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Status,
            GridPos = 1
        }, {
            Name = "Model Number",
            PrettyName = "Dashboard~Model Number",
            Label = "Model Number",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "Serial Number",
            PrettyName = "Dashboard~Serial Number",
            Label = "Serial Number",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
        }, {
            Name = "SICP Version",
            PrettyName = "Dashboard~SICP Version",
            Label = "SICP Version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
        }, {
            Name = "Firmware Version",
            PrettyName = "Dashboard~Firmware Version",
            Label = "Firmware Version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 6
        }, {
            Name = "Build Date",
            PrettyName = "Dashboard~Build Date",
            Label = "Build Date",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 7
        }, {
            Name = "Android Version",
            PrettyName = "Dashboard~Android Version",
            Label = "Android Version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 8
        }, {
            Name = "HDMI Switch Version",
            PrettyName = "Dashboard~HDMI Switch Version",
            Label = "HDMI Switch Version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 9
        }, {
            Name = "HDMI Switch 2 Version",
            PrettyName = "Dashboard~HDMI Switch 2 Version",
            Label = "HDMI Switch 2 Version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 10
        }, {
            Name = "LAN Firmware Version",
            PrettyName = "Dashboard~LAN Firmware Version",
            Label = "LAN Firmware Version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 11
        }, {
            Name = "Platform Label",
            PrettyName = "Dashboard~Platform Label",
            Label = "Platform Label",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 12
        }, {
            Name = "Platform Version",
            PrettyName = "Dashboard~Platform Version",
            Label = "Platform Version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 13
        }, {
            Name = "Operating Hours",
            PrettyName = "Dashboard~Operating Hours",
            Label = "Operating Hours",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 14
        }, {
            Name = "Temperature Sensor 1",
            PrettyName = "Dashboard~Temperature Sensor 1",
            Label = "Temperature Sensor 1",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 15
        }, {
          Name = "Temperature Sensor 2",
          PrettyName = "Dashboard~Temperature Sensor 2",
          Label = "Temperature Sensor 2",
          ControlType = "Indicator",
          IndicatorType = "Text",
          PinStyle = "Output",
          UserPin = true,
          Size = Sizes.Text,
          GridPos = 16
        }}
      }, {
        ["Name"] = "Power",
        ["Depth"] = 9,
        ["Controls"] = {{
            Name = "Power",
            PrettyName = "Power~Power",
            Label = "Power (On/Off)",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        }, {
            Name = "Boot On Source",
            PrettyName = "Power~Boot On Source",
            Label = "Boot On Source",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "Cold Start State",
            PrettyName = "Power~Cold Start State",
            Label = "Cold Start State",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "Signal Auto Detection",
            PrettyName = "Power~Signal Auto Detection",
            Label = "Signal Auto Detection",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
      }, {
            Name = "Power Save Mode",
            PrettyName = "Power~Power Save Mode",
            Label = "Power Save Mode",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
      }, {
            Name = "Smart Power Mode",
            PrettyName = "Power~Smart Power Mode",
            Label = "Smart Power Mode",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 6
      }, {
            Name = "Advanced Power Management",
            PrettyName = "Power~Advanced Power Management",
            Label = "Advanced Power Management",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 7
      }, {
            Name = "Eco Mode",
            PrettyName = "Power~Eco Mode",
            Label = "Eco Mode",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 8
      }, {
            Name = "OPS Power Setting",
            PrettyName = "Power~OPS Power Setting",
            Label = "OPS Power Setting",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 9
      }}
      }, {
        ["Name"] = "Security",
        ["Depth"] = 3,
        ["Controls"] = {{
            Name = "Remote Control Lock",
            PrettyName = "Security~Remote Control Lock",
            Label = "Remote Control Lock",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 1
        }, {
            Name = "Keypad Lock",
            PrettyName = "Security~Keypad Lock",
            Label = "Keypad Lock",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "External Storage Lock",
            PrettyName = "Security~External Storage Lock",
            Label = "External Storage Lock",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }}
      }, {
        ["Name"] = "Restart",
        ["Depth"] = 2,
        ["Controls"] = {{
            Name = "Restart Android",
            PrettyName = "Restart~Restart Android",
            Label = "Restart Android",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        }, {
            Name = "Restart Scalar",
            PrettyName = "Restart~Restart Scalar",
            Label = "Restart Scalar",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 2
        }}
    }}
},{
    ["PageName"] = "Source & Image",

    ["Groupings"] = {{
        ["Name"] = "Source",
        ["Depth"] = 7,
        ["Controls"] = {{
            Name = "Video Signal Present",
            PrettyName = "Source~Video Signal Present",
            Label = "Video Signal Present",
            ControlType = "Indicator",
            IndicatorType = "LED",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.LED,
            GridPos = 1
          }, {
            Name = "Number Of Input Sources",
            PrettyName = "Source~Number Of Input Sources",
            Label = "Number Of Input Sources",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "Input Source",
            PrettyName = "Source~Input Source",
            Label = "Input Source",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "Picture Format",
            PrettyName = "Source~Picture Format",
            Label = "Picture Format",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
        }, {
            Name = "Freeze Image",
            PrettyName = "Source~Freeze Image",
            Label = "Freeze Image (On/Off)",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 5
        }, {
            Name = "Backlight",
            PrettyName = "Source~Backlight",
            Label = "Backlight (On/Off)",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 6
        }, {
            Name = "Send Screenshot",
            PrettyName = "Source~Send Screenshot",
            Label = "Send Screenshot",
            ControlType = "Button", 
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 7
        }}
      }, {
      ["Name"] = "Image",
      ["Depth"] = 7,
      ["Controls"] = {{
            Name = "Black Level",
            PrettyName = "Image~Black Level",
            Label = "Black Level",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Style = "Text",
            Max = 100,
            Min = 0,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 1
        }, {
            Name = "Brightness",
            PrettyName = "Image~Brightness",
            Label = "Brightness",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Style = "Text",
            Max = 100,
            Min = 0,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "Colour",
            PrettyName = "Image~Colour",
            Label = "Colour",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Style = "Text",
            Max = 100,
            Min = 0,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
      }, {
            Name = "Contrast",
            PrettyName = "Image~Contrast",
            Label = "Contrast",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Style = "Text",
            Max = 100,
            Min = 0,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
      }, {
            Name = "Sharpness",
            PrettyName = "Image~Sharpness",
            Label = "Sharpness",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Style = "Text",
            Max = 100,
            Min = 0,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
      }, {
            Name = "Tint",
            PrettyName = "Image~Tint",
            Label = "Tint",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Style = "Text",
            Max = 100,
            Min = 0,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 6
      }, {
            Name = "Gamma",
            PrettyName = "Image~Gamma",
            Label = "Gamma",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 7
        }}
    }}
},{
    ["PageName"] = "Audio",

    ["Groupings"] = {{
        ["Name"] = "Mute",
        ["Depth"] = 1,
        ["Controls"] = {{
            Name = "Mute",
            PrettyName = "Audio~Mute",
            Label = "Mute (On/Off)",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        }}
      }, {
      ["Name"] = "Speakers",
      ["Depth"] = 3,
      ["Controls"] = {{
            Name = "Speakers",
            PrettyName = "Audio~Speakers",
            Label = "Speakers (On/Off)",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        }, {
            Name = "Speaker Volume",
            PrettyName = "Audio~Speaker Volume",
            Label = "Speaker Volume",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Style = "Text",
            Max = 100,
            Min = 0,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "Speaker Volume",
            PrettyName = "Audio~Speaker Volume",
            Label = "Speaker Volume (Up/Down)",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Count = 2,
            Size = Sizes.Button,
            GridPos = 3
        }}
    }, {
    ["Name"] = "Line Out",
    ["Depth"] = 2,
    ["Controls"] = {{
            Name = "Audio Out Volume",
            PrettyName = "Audio~Audio Out Volume",
            Label = "Audio Out Volume",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Style = "Text",
            Max = 100,
            Min = 0,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 1
        }, {
            Name = "Audio Out Volume",
            PrettyName = "Audio~Audio Out Volume",
            Label = "Audio Out Volume (Up/Down)",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Count = 2,
            Size = Sizes.Button,
            GridPos = 2
        }}
    }}
},{
     ["PageName"] = "Setup",

    ["Groupings"] = {{
        ["Name"] = "Setup",
        ["Depth"] = 8,
        ["Controls"] = {{
            Name = "Connect",
            PrettyName = "Setup~Connect",
            Label = "Connect",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        }, {
            Name = "IP Address",
            PrettyName = "Setup~IP Address",
            Label = "IP Address",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "Port",
            PrettyName = "Setup~Port",
            Label = "Port",
            ControlType = "Knob",
            ControlUnit = "Integer",
            Style = "Text",
            Max = 65535,
            Min = 0,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "Event Log Prefix",
            PrettyName = "Setup~Event Log Prefix",
            Label = "Event Log Prefix",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
        }, {
            Name = "Log Entry",
            PrettyName = "Setup~Log Entry",
            Label = "Log Entry",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
        }, {
            Name = "Log Severity",
            PrettyName = "Setup~Log Severity",
            Label = "Log Severity",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 6
        }, {
            Name = "Log Trigger",
            PrettyName = "Setup~Log Trigger",
            Label = "Log Trigger",
            ControlType = "Button", 
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 7
        }, {
            Name = "Poll Interval",
            PrettyName = "Setup~Poll Interval",
            Label = "Poll Interval",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 8
      }}
    }}
}}


-- Define the color of the plugin object when dragged into the design
function GetColor(props)
    return Colors.philipsblue
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return string.format("Philips\nDisplay\nSICP Protocol\n[%s]", PluginInfo.Version)
end

-- Define User configurable Properties of the plugin
function GetProperties()
    local props = {}
    return props
end

-- Optional function used if plugin has multiple pages
function GetPages(props)
    local pages = {}
    for i, tbl in ipairs(Master_Object) do
      table.insert(pages, {name = tbl.PageName})
    end
    return pages
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
    local pins = {}
    return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
    return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
    local components = {}
    return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
    local wiring = {}
    return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
    local ctls = {}
    for i, page in ipairs(Master_Object) do
      for i, grouping in ipairs(page.Groupings) do
          for i, control in ipairs(grouping.Controls) do
              table.insert(ctls, control)
          end
      end
    end
    return ctls
end

-- Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
    local graphics, layout, control_slots = {}, {}, {}
    
    local page_index = props["page_index"].Value
    
    -- starting depth
    local total_depth = 0
    
    -- dynamically create graphics boxes
    for i, grouping in ipairs(Master_Object[page_index].Groupings) do
    
        total_depth = total_depth + control_depth
    
        depth = grouping.Depth
    
        len = string.len(grouping.Name)
    
        table.insert(graphics, {
            Type = "GroupBox",
            Fill = Colors.philipsblue,
            StrokeColor = Colors.stroke,
            StrokeWidth = 2,
            CornerRadius = 8,
            HTextAlign = "Left",
            Position = {
                0,
                total_depth
            },
            Size = {
                width,
                40 + (depth * control_depth) + ((depth - 1) * control_gap)
            }
        })
    
        -- generate control slots per group box depth and control_depth requirement
    
        grouping["Control_Slots"] = {}
    
        for n = 1, grouping.Depth do
    
            grouping["Control_Slots"][n] = ((total_depth + 25) + (control_depth * (n - 1)) + ((n - 1) * control_gap))
    
        end
    
        -- dynamically create groupbox labels
        table.insert(graphics, {
            Type = "Label",
            Text = Master_Object[page_index].Groupings[i].Name,
            -- Size = 11,
            Color = {
                255,
                255,
                255
            },
            Fill = Colors.heading,
            StrokeWidth = 0,
            CornerRadius = 4,
            Position = {
                15,
                total_depth - 8
            },
            Size = {
                len <= 12 and 90 or len <= 20 and 140 or len <= 30 and 170,
                18
            },
            Font = "Montserrat",
            FontStyle = "Medium"
        })
    
        total_depth = total_depth + 40 + ((depth * control_depth) + ((depth - 1) * control_gap))
    
    end
    
    -- width of the group box minus borders
    local box_width = (width - 60)
    
    for i, grouping in ipairs(Master_Object[page_index].Groupings) do
    
        local Slots = grouping.Control_Slots
    
        for _, ctl in ipairs(grouping.Controls) do
    
            local pos_x = nil
            local pos_y = nil
    
            if (ctl.Width and (ctl.Width == "Full")) then
                pos_x = 15
                pos_y = (Slots[ctl.GridPos] + control_depth + control_gap)
            else
                if (ctl.Position) then
                    pos_x = ctl.Position
                else
                    pos_x = (width - 15) - ctl.Size[1]
                end
                pos_y = Slots[ctl.GridPos]
            end
    
            local name = ctl.Name
            local prettyname = ctl.PrettyName
            local size = ctl.Size
            if ctl.Count then
                for n = 1 , ctl.Count do
                
                -- for controls with a control count > 1. Sort the pins into groups and add the number to the name
                if ctl.Count > 1 then
                    prettyname = ctl.PrettyName..'~'..n
                    name = ctl.Name.." "..n
                
                -- add the control to the control column, multiple controls are added left to right
                layout[name] = {
                    Position = {
                        pos_x - ctl.Count * ctl.Size[1] +  n * ctl.Size[1],
                        pos_y
                    },
                    PrettyName = prettyname,
                    Style = ctl.Style,
                    Size = ctl.Size,
                    Font = "Droid Sans",
                    FontSize = 8
                  }
                end
            end
                else
                -- add the controls where the control count = 1
                layout[ctl.Name] = {
                    PrettyName = ctl.PrettyName,
                    Legend = ctl.Legend,
                    Style = ctl.Style,
                    Position = {
                        pos_x,
                        pos_y
                    },
                    Size = ctl.Size,
                    Font = "Droid Sans",
                    FontSize = 8
                  }
                --end
            end

--[[

                layout[ctl.Name] = {
                PrettyName = ctl.PrettyName,
                Legend = ctl.Legend,
                Style = ctl.Style,
                Position = {
                    pos_x,
                    pos_y
                },
                Size = ctl.Size,
                Font = "Droid Sans",
                FontSize = 8
            }
]]--
    
            if ctl.Label then
                table.insert(graphics, {
                    Type = "Label",
                    Text = ctl.Label,
                    HTextAlign = "Left",
                    Color = Colors.white,
                    Font = "Droid Sans",
                    Position = {
                        15,
                        (Slots[ctl.GridPos] ~= nil) and Slots[ctl.GridPos] or Slots[#Slots]
                    },
                    Size = {
                        (ctl.Width == "Full") and (width - 30) or (width - 30) - ctl.Size[1],
                        control_depth
                    }
                })
            end
    
        end
    
    end
    return layout, graphics
end



------------------------ USER COMPONENT Runtime Code is below wrapped inside of 'if Controls then...user script...end'
--Start event based logic
if Controls then

--[[
# Q-SYS-Philips-BDL-SICP-Commands

- Written by Glen Gorton (glen.gorton@gmail.com)
- Built using a Philips 65BDL3511Q (SICP v2.06, Firmware V1.020T66064)

## NOTES:

- To establish communication via TCP/IP connect to display on port 5000. TCP/IP port 5000 is the default control port for all displays. Some displays have the option to change the communication port in the settings.
- Control commands can be sent from a host controller via the Ethernet (port 5000) connection. A new command should not be sent until the previous command is acknowledged.
- If a response is not received within 500 milliseconds a retry may be triggered. Have found this is not true -> a socket disconnect and reconnect is required.

- Command Packet format:
Byte 1: MsgSize  
Byte 2: Control / Monitor ID (set within the display = 1 to 255(0x01 to 0xFF))  
Byte 3: Group (Group ID range = 1 to 254(0x01 to 0xFE))  
Byte 4 to Byte 39: Data[0] to Data[N]. Data parameters. This field can also be empty.  
Last Byte: Checksum (range = 0 to 255(0x00 to 0xFF))  


- See Command tables below for controls that were unable to be tested as they're not supported on the xxBDL3511Q models.
- Display will stop responding during power on/off. Polling will stop for 10 secs during this time, then restart.
- PollTimer is stopped prior to sending each command, and is then restarted after data is received.
- For NAV (Not Available) GetCommand responses, have included logic within the NAV Response to update the related Control.String to "n/a".

- 65DBL3511Q does not have Android sources 'Media Player, 'Browser' or 'PDF Player' -> unable to test Playlist/URL and USB Autoplay for these sources.
- 65BDL3511Q does have 'USB' source, which reports back as 'Media Player' when querying the display.
- Can confirm the Boot Source-> USB ->Playlist 1-7 and USB Autoplay does work provided the correct folder structure is created on the USB for photo/video:  
1. Create a folder named as “playlist1”, "playlist2", etc or "autoplay"
2. Put the sources(photo/video) within the folder. (There is no actual playlist file)

- Unable to test 'Send screenshot' function. Email server configuration not available on the 65BDL3511Q.


GetCommands = {  
  getNUMBER_OF_INPUT_SOURCES = {0xAB}, -- SICP v2.05 onwards  
  getINPUT_SOURCE = {0xAD},  
  getBOOT_SOURCE = {0xBA}, -- SICP v2.05 onwards  
  getVIDEO_PARAMETERS = {0x33},  
  getPOWER_STATE = {0x19},  
  getSICP_VERSION = {0xA2, 0x00},  
  getPLATFORM_LABEL = {0xA2, 0x01},  
  getPLATFORM_VERSION = {0xA2, 0x02},  
  getMODEL_NUMBER = {0xA1, 0x00},  
  getFIRMWARE_VERSION = {0xA1, 0x01},  
  getBUILD_DATE = {0xA1, 0x02},  
  getANDROID_VERSION = {0xA1, 0x03}, -- NAV - Not Available on xxBDL3511Q -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.  
  getHDMI_SWITCH_VERSION = {0xA1, 0x04}, -- SICP v2.09 onwards -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.  
  getLAN_FW_VERSION = {0xA1, 0x05}, -- SICP v2.09 onwards -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.  
  getHDMI_SWITCH2_VERSION = {0xA1, 0x06}, -- SICP v2.10 onwards -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.  
  getOPERATING_HOURS = {0x0F, 0x02},  
  getTEMPERATURE_SENSOR = {0x2F},  
  getSERIAL_NUMBER = {0x15},  
  getVIDEO_SIGNAL_PRESENT = {0x59}, -- SICP v2.03 onwards  
  getPOWER_STATE = {0x19},  
  getCOLD_START_STATE = {0xA4},  
  getPOWER_SAVE_MODE = {0xD3},  
  getSMART_POWER_MODE = {0xDE},  
  getADVANCED_POWER_MANAGEMENT = {0xD1}, -- Supported on Himalaya & Eagle 1.3 Platforms. NACK - Not Acknowledged ON xxBDL3511Q  
  getECO_MODE = {0x63}, -- SICP v2.00 onwards. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q  
  getBACKLIGHT = {0x71}, -- SICP v2.03 onwards  
  getOPS_POWER_SETTING = {0x6E}, -- SICP v2.08 onwards -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06  
  getSIGNAL_AUTO_DETECTION = {0xAF},  
  getVOLUME = {0x45},  
  getMUTE = {0x46}, -- SICP v2.05 onwards. Mutes both the internal speakers and the audio output.  
  getSPEAKERS = {0x8F}, -- SICP v2.07 onwards. -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06  
  getREMOTELOCK = {0x1D},  
  getKEYPADLOCK = {0x1B},  
  getPICTURE_FORMAT = {0x3B},  
  getFREEZEIMAGE = {0x76}, -- SICP v2.06 onwards.  
  getSTORAGELOCK = {0xF2}, -- NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q  
}  

SetCommands = {  
  setPOWER_STATE = {0x18},  
  setCOLD_START_STATE = {0xA3},  
  setPOWER_SAVE_MODE = {0xD2},  
  setSMART_POWER_MODE = {0XDD},  
  setADVANCED_POWER_MANAGEMENT = {0xD0}, -- Supported on Himalaya & Eagle 1.3 Platforms. NACK - Not Acknowledged ON xxBDL3511Q  
  setECO_MODE = {0x64}, -- SICP v2.00 onwards. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q  
  setMONITOR_RESTART = {0x57}, -- SICP v2.02 onwards. This command is used to restart/reboot the display.  
  setBACKLIGHT = {0x72}, -- SICP v2.03 onwards  
  setOPS_POWER_SETTING = {0x6F}, -- SICP v2.08 onwards -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06  
  setINPUT_SOURCE = {0xAC},  
  setBOOT_SOURCE = {0xBB}, -- SICP v2.05 onwards  
  setSIGNAL_AUTO_DETECTION = {0xAE},  
  setVOLUME = {0x44}, -- Speaker Volume and Audio Out Volume values are inserted at the Volume Eventhandler.  
  setVOLUME_STEP = {0x41}, -- Speaker Volume and Audio Out Volume values are inserted at the Volume Step Eventhandler.  
  setMUTE = {0x47}, -- SICP v2.05 onwards. Mutes both the internal speakers and the audio output.  
  setSPEAKERS = {0x8E}, -- SICP v2.07 onwards. -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06  
  setREMOTELOCK = {0x1C},  
  setKEYPADLOCK = {0x1A},  
  setVIDEO_PARAMETERS = {0x32},  
  setPICTURE_FORMAT = {0x3A},  
  setFREEZEIMAGE = {0x77}, -- SICP v2.06 onwards.  
  setSTORAGELOCK = {0xF1}, -- NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q  
  setSEND_SCREENSHOT = {0x58}, -- SICP v2.02 onwards. This command is used to Take a screenshot of current source and send it via Email. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q  
}  

PollCommands = {  
  {0xAB}, --getNUMBER_OF_INPUT_SOURCES -- SICP v2.05 onwards  
  {0xAD}, --getINPUT_SOURCE  
  {0xBA}, --getBOOT_SOURCE -- SICP v2.05 onwards  
  {0x33}, --getVIDEO_PARAMETERS  
  {0x19}, --getPOWER_STATE  
  {0xA2, 0x00}, --getSICP_VERSION  
  {0xA2, 0x01}, --getPLATFORM_LABEL  
  {0xA2, 0x02}, --getPLATFORM_VERSION  
  {0xA1, 0x00}, --getMODEL_NUMBER  
  {0xA1, 0x01}, --getFIRMWARE_VERSION  
  {0xA1, 0x02}, --getBUILD_DATE  
  {0xA1, 0x03}, --getANDROID_VERSION -- NAV - Not Available on xxBDL3511Q  
  {0xA1, 0x04}, --getHDMI_SWITCH_VERSION -- SICP v2.09 onwards -- NAV - Not Available on xxBDL3511Q  
  {0xA1, 0x05}, --getLAN_FW_VERSION -- SICP v2.09 onwards -- NAV - Not Available on xxBDL3511Q  
  {0xA1, 0x06}, --getHDMI_SWITCH2_VERSION -- SICP v2.10 onwards -- NAV - Not Available on xxBDL3511Q  
  {0x0F, 0x02}, --getOPERATING_HOURS  
  {0x2F}, --getTEMPERATURE_SENSOR  
  {0x15}, --getSERIAL_NUMBER  
  {0x59}, --getVIDEO_SIGNAL_PRESENT -- SICP v2.03 onwards  
  {0xA4}, --getCOLD_START_STATE  
  {0xD3}, --getPOWER_SAVE_MODE  
  {0xDE}, --getSMART_POWER_MODE  
  {0xD1}, --getADVANCED_POWER_MANAGEMENT -- Supported on Himalaya & Eagle 1.3 Platforms. NACK - Not Acknowledged ON xxBDL3511Q  
  {0x63}, --getECO_MODE -- SICP v2.00 onwards. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q  
  {0x71}, --getBACKLIGHT -- SICP v2.03 onwards  
  {0x6E}, --getOPS_POWER_SETTING -- SICP v2.08 onwards -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06  
  {0xAF}, --getSIGNAL_AUTO_DETECTION  
  {0x45}, --getVOLUME  
  {0x46}, --getMUTE -- SICP v2.05 onwards. Mutes both the internal speakers and the audio output.  
  {0x8F}, --getSPEAKERS -- SICP v2.07 onwards. -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06  
  {0x1D}, --getREMOTELOCK  
  {0x1B}, --getKEYPADLOCK  
  {0x3B}, --getPICTURE_FORMAT  
  {0x76}, --getFREEZEIMAGE -- SICP v2.06 onwards.  
  {0xF2}, --getSTORAGELOCK -- NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q  
}  


]]--

-- Constants

Controls["Poll Interval"].Choices = {'0.2','0.3','0.4','0.5','0.6','0.7','0.8','0.9','1','1.5','2','3','4','5'}
Controls["Cold Start State"].Choices = {'--- Select ---', 'Power Off', 'Forced On', 'Last Status'}
Controls["Power Save Mode"].Choices = {'--- Select ---', 'RGB Off & Video Off', 'RBG Off, Video On', 'RBG On, Video Off', 'RGB On & Video On', 'Mode 1', 'Mode 2', 'Mode 3', 'Mode 4'}
Controls["Smart Power Mode"].Choices = {'--- Select ---', 'Off', 'Low', 'Medium', 'High'}
Controls["Advanced Power Management"].Choices = {'--- Select ---', 'Off', 'On', 'Mode 1 (TCP Off / WOL On)', 'Mode 2 (TCP On / WOL Off)'}
Controls["Eco Mode"].Choices = {'--- Select ---', 'Off', 'On'}
Controls["OPS Power Setting"].Choices = {'--- Select ---', 'Always Off', 'Always On', 'Auto'}
Controls["Input Source"].Choices = {'--- Select ---'}
InputSources = {'--- Select ---'}
Controls["Boot On Source"].Choices = {'--- Select ---'}
BootOnSources = {'--- Select ---', 'Last Input'}
Controls["Signal Auto Detection"].Choices = {'--- Select ---', 'Off', 'All', 'Reserved', 'PC Sources Only', 'Video Sources Only', 'Failover'}
Controls["Remote Control Lock"].Choices = {'--- Select ---', 'Unlock All', 'Lock All', 'Lock All Except Power', 'Lock All Except Volume', 'Primary (Master)', 'Secondary (Daisy Chain)', 'Lock All Except Power & Volume'}
Controls["Keypad Lock"].Choices = {'--- Select ---', 'Unlock All', 'Lock All', 'Lock All Except Power', 'Lock All Except Volume', 'Lock All Except Power & Volume'}
Controls["Gamma"].Choices = {'--- Select ---', 'Native', 'S Gamma', '2.2', '2.4', 'D-Image (DICOM Gamma)'}
Controls["Picture Format"].Choices = {'--- Select ---', 'Normal (4:3)', 'Custom', 'Real (1:1)', 'Full', '21:9', 'Dynamic', '16:9'}


TextIndicators = {"SICP Version", "Platform Label", "Platform Version", "Model Number", "Firmware Version", "Build Date", "Android Version", "HDMI Switch Version", "LAN Firmware Version", "HDMI Switch 2 Version",
"Operating Hours", "Temperature Sensor 1", "Temperature Sensor 2", "Serial Number", "Number Of Input Sources"}

ValueIndicators = {"Speaker Volume", "Audio Out Volume", "Brightness", "Colour", "Contrast", "Sharpness", "Tint (Hue)", "Black Level"}

QueuedCommands = {}

-- Socket Creation
socket = TcpSocket.New()
port = math.floor(Controls["Port"].Value)
-- Time in seconds to wait before attempting to reconnect. 0 disables automatic reconnect. Optional; Default is 5 seconds.
socket.ReconnectTimeout = 5


-- Poll Timer
PollTimer = Timer.New()
-- PollTimer:Start(Controls["Poll Interval"].String) --> Seconds (moved to socket.Connected function)
PollTimer.EventHandler = function()
  
  if ResponseWait == false then
    -- Send first command from the PollCommands table.
    SendCommand(PollCommands[CurrentPollCommand])
  elseif ResponseWait == true then
    print("Response Wait = true. Poll Command not sent.")
  
  return end -- This will stop the rest of this function so that the next PollCommand to be sent remains the same at next attempt.
  
  -- Increase CurrentPollCommand by 1 to work through the PollCommand table. But if the CurrentPollCommand is the final command in the table, reset to 1.
  if CurrentPollCommand < #PollCommands then
    CurrentPollCommand = CurrentPollCommand+1
  elseif CurrentPollCommand == #PollCommands then
    CurrentPollCommand = 1
  end
end


-- Poll Response Timer
-- Timer is used to check that a response is received after 30 seconds, and if not set a Compromised status.
-- This situation may occur is the display locks up and stops responding.
PollResponseTimer = Timer.New()
PollResponseTimer.EventHandler = function()
  SetStatus(1, "Display has not responded to a Command or Poll request.")

  -- Have found that the display will get into this state if two commands are sent at the same time, or a command is sent before a response is received. Only a socket reconnect seems to resolve the issue.
  -- Can also occur following a power on/off if a command is sent before the display has booted.
  -- Within the Connect() function is a socket disconnect and reconnect.
  Connect()
end


-- Philips Input Sources Table
AllInputSources = {
  [1] = "VIDEO",
  [2] = "S-VIDEO",
  [3] = "COMPONENT",
  [4] = "CVI 2", --(not applicable)
  [5] = "VGA",
  [6] = "HDMI 2",
  [7] = "DisplayPort 2",
  [8] = "USB 2",
  [9] = "Card DVI-D",
  [10] = "Display Port 1",
  [11] = "Card OPS",
  [12] = "USB 1",
  [13] = "HDMI",
  [14] = "DVI-D",
  [15] = "HDMI 3",
  [16] = "BROWSER",
  [17] = "SMART CMS",
  [18] = "DMS (Digital Media Server)",
  [19] = "INTERNAL STORAGE",
  [20] = "Reserved 1",
  [21] = "Reserved 2",
  [22] = "Media Player",
  [23] = "PDF Player",
  [24] = "Custom",
  [25] = "HDMI 4",
  [26] = "VGA 2",
  [27] = "VGA 3",
  [28] = "IWB",
  [29] = "CMND & Play Web",
  [30] = "Home/Launcher",
  [31] = "USB Type-C 1",
  [32] = "Kiosk",
  [33] = "Smart Info",
  [34] = "Tuner",
  [35] = "Google Cast",
  [36] = "Interact",
  [37] = "USB Type-C 2",
}

AllPlaylistTags = {
  [0] = "No Playlist or URL",
  [1] = "Playlist / URL 1",
  [2] = "Playlist / URL 2",
  [3] = "Playlist / URL 3",
  [4] = "Playlist / URL 4",
  [5] = "Playlist / URL 5",
  [6] = "Playlist / URL 6",
  [7] = "Playlist / URL 7",
  [8] = "USB Autoplay",
}

-- Philips Boot Sources Table (Same as Input Sources table except with the addtional of [0] = "Last Input")
AllBootOnSources = {
  [0] = "Last Input",
  [1] = "VIDEO",
  [2] = "S-VIDEO",
  [3] = "COMPONENT",
  [4] = "CVI 2", --(not applicable)
  [5] = "VGA",
  [6] = "HDMI 2",
  [7] = "DisplayPort 2",
  [8] = "USB 2",
  [9] = "Card DVI-D",
  [10] = "Display Port 1",
  [11] = "Card OPS",
  [12] = "USB 1",
  [13] = "HDMI",
  [14] = "DVI-D",
  [15] = "HDMI 3",
  [16] = "BROWSER",
  [17] = "SMART CMS",
  [18] = "DMS (Digital Media Server)",
  [19] = "INTERNAL STORAGE",
  [20] = "Reserved 1",
  [21] = "Reserved 2",
  [22] = "Media Player",
  [23] = "PDF Player",
  [24] = "Custom",
  [25] = "HDMI 4",
  [26] = "VGA 2",
  [27] = "VGA 3",
  [28] = "IWB",
  [29] = "CMND & Play Web",
  [30] = "Home/Launcher",
  [31] = "USB Type-C 1",
  [32] = "Kiosk",
  [33] = "Smart Info",
  [34] = "Tuner",
  [35] = "Google Cast",
  [36] = "Interact",
  [37] = "USB Type-C 2",
}

GetCommands = {
  getNUMBER_OF_INPUT_SOURCES = {0xAB}, -- SICP v2.05 onwards
  getINPUT_SOURCE = {0xAD},
  getBOOT_SOURCE = {0xBA}, -- SICP v2.05 onwards
  getVIDEO_PARAMETERS = {0x33},
  getPOWER_STATE = {0x19},
  getSICP_VERSION = {0xA2, 0x00},
  getPLATFORM_LABEL = {0xA2, 0x01},
  getPLATFORM_VERSION = {0xA2, 0x02},
  getMODEL_NUMBER = {0xA1, 0x00},
  getFIRMWARE_VERSION = {0xA1, 0x01},
  getBUILD_DATE = {0xA1, 0x02},
  getANDROID_VERSION = {0xA1, 0x03}, -- NAV - Not Available on xxBDL3511Q -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.
  getHDMI_SWITCH_VERSION = {0xA1, 0x04}, -- SICP v2.09 onwards -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.
  getLAN_FW_VERSION = {0xA1, 0x05}, -- SICP v2.09 onwards -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.
  getHDMI_SWITCH2_VERSION = {0xA1, 0x06}, -- SICP v2.10 onwards -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.
  getOPERATING_HOURS = {0x0F, 0x02},
  getTEMPERATURE_SENSOR = {0x2F},
  getSERIAL_NUMBER = {0x15},
  getVIDEO_SIGNAL_PRESENT = {0x59}, -- SICP v2.03 onwards
  getPOWER_STATE = {0x19},
  getCOLD_START_STATE = {0xA4},
  getPOWER_SAVE_MODE = {0xD3},
  getSMART_POWER_MODE = {0xDE},
  getADVANCED_POWER_MANAGEMENT = {0xD1}, -- Supported on Himalaya & Eagle 1.3 Platforms. NACK - Not Acknowledged ON xxBDL3511Q
  getECO_MODE = {0x63}, -- SICP v2.00 onwards. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q
  getBACKLIGHT = {0x71}, -- SICP v2.03 onwards
  getOPS_POWER_SETTING = {0x6E}, -- SICP v2.08 onwards -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06
  getSIGNAL_AUTO_DETECTION = {0xAF},  
  getVOLUME = {0x45},
  getMUTE = {0x46}, -- SICP v2.05 onwards. Mutes both the internal speakers and the audio output.
  getSPEAKERS = {0x8F}, -- SICP v2.07 onwards. -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06
  getREMOTELOCK = {0x1D},
  getKEYPADLOCK = {0x1B},
  getPICTURE_FORMAT = {0x3B},
  getFREEZEIMAGE = {0x76}, -- SICP v2.06 onwards.
  getSTORAGELOCK = {0xF2}, -- NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q
}

SetCommands = {
  setPOWER_STATE = {0x18},
  setCOLD_START_STATE = {0xA3},
  setPOWER_SAVE_MODE = {0xD2},
  setSMART_POWER_MODE = {0XDD},
  setADVANCED_POWER_MANAGEMENT = {0xD0}, -- Supported on Himalaya & Eagle 1.3 Platforms. NACK - Not Acknowledged ON xxBDL3511Q
  setECO_MODE = {0x64}, -- SICP v2.00 onwards. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q
  setMONITOR_RESTART = {0x57}, -- SICP v2.02 onwards. This command is used to restart/reboot the display.
  setBACKLIGHT = {0x72}, -- SICP v2.03 onwards
  setOPS_POWER_SETTING = {0x6F}, -- SICP v2.08 onwards -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06
  setINPUT_SOURCE = {0xAC},
  setBOOT_SOURCE = {0xBB}, -- SICP v2.05 onwards  
  setSIGNAL_AUTO_DETECTION = {0xAE},
  setVOLUME = {0x44}, -- Speaker Volume and Audio Out Volume values are inserted at the Volume Eventhandler.
  setVOLUME_STEP = {0x41}, -- Speaker Volume and Audio Out Volume values are inserted at the Volume Step Eventhandler.
  setMUTE = {0x47}, -- SICP v2.05 onwards. Mutes both the internal speakers and the audio output.
  setSPEAKERS = {0x8E}, -- SICP v2.07 onwards. -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06
  setREMOTELOCK = {0x1C},
  setKEYPADLOCK = {0x1A},
  setVIDEO_PARAMETERS = {0x32},
  setPICTURE_FORMAT = {0x3A},  
  setFREEZEIMAGE = {0x77}, -- SICP v2.06 onwards.
  setSTORAGELOCK = {0xF1}, -- NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q
  setSEND_SCREENSHOT = {0x58}, -- SICP v2.02 onwards. This command is used to Take a screenshot of current source and send it via Email. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q
}

PollCommands = {
  {0xAB}, --getNUMBER_OF_INPUT_SOURCES -- SICP v2.05 onwards
  {0xAD}, --getINPUT_SOURCE
  {0xBA}, --getBOOT_SOURCE -- SICP v2.05 onwards
  {0x33}, --getVIDEO_PARAMETERS
  {0x19}, --getPOWER_STATE
  {0xA2, 0x00}, --getSICP_VERSION
  {0xA2, 0x01}, --getPLATFORM_LABEL
  {0xA2, 0x02}, --getPLATFORM_VERSION
  {0xA1, 0x00}, --getMODEL_NUMBER
  {0xA1, 0x01}, --getFIRMWARE_VERSION
  {0xA1, 0x02}, --getBUILD_DATE
  {0xA1, 0x03}, --getANDROID_VERSION -- NAV - Not Available on xxBDL3511Q
  {0xA1, 0x04}, --getHDMI_SWITCH_VERSION -- SICP v2.09 onwards -- NAV - Not Available on xxBDL3511Q
  {0xA1, 0x05}, --getLAN_FW_VERSION -- SICP v2.09 onwards -- NAV - Not Available on xxBDL3511Q
  {0xA1, 0x06}, --getHDMI_SWITCH2_VERSION -- SICP v2.10 onwards -- NAV - Not Available on xxBDL3511Q
  {0x0F, 0x02}, --getOPERATING_HOURS
  {0x2F}, --getTEMPERATURE_SENSOR
  {0x15}, --getSERIAL_NUMBER
  {0x59}, --getVIDEO_SIGNAL_PRESENT -- SICP v2.03 onwards
  {0xA4}, --getCOLD_START_STATE
  {0xD3}, --getPOWER_SAVE_MODE
  {0xDE}, --getSMART_POWER_MODE
  {0xD1}, --getADVANCED_POWER_MANAGEMENT -- Supported on Himalaya & Eagle 1.3 Platforms. NACK - Not Acknowledged ON xxBDL3511Q
  {0x63}, --getECO_MODE -- SICP v2.00 onwards. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q
  {0x71}, --getBACKLIGHT -- SICP v2.03 onwards
  {0x6E}, --getOPS_POWER_SETTING -- SICP v2.08 onwards -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06
  {0xAF}, --getSIGNAL_AUTO_DETECTION
  {0x45}, --getVOLUME
  {0x46}, --getMUTE -- SICP v2.05 onwards. Mutes both the internal speakers and the audio output.
  {0x8F}, --getSPEAKERS -- SICP v2.07 onwards. -- NACK - Not Acknowledged: Checksum/Format error. Unable to test on xxBDL3511Q running SICP v2.06
  {0x1D}, --getREMOTELOCK
  {0x1B}, --getKEYPADLOCK
  {0x3B}, --getPICTURE_FORMAT
  {0x76}, --getFREEZEIMAGE -- SICP v2.06 onwards.
  {0xF2}, --getSTORAGELOCK -- NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q
}


----------------------------------------------------------------------------------

function Initialize()
  sLastCommandSent = ""
  numberOfReconnects = 0
  CurrentPollCommand = 1
  ResponseWait = false
  PollTimer:Stop()
  PollResponseTimer:Stop()
  ResetTextIndicators()
  Controls["Poll Interval"].String = Controls["Poll Interval"].Choices[1]
  Controls["Cold Start State"].String = Controls["Cold Start State"].Choices[1]
  Controls["Power Save Mode"].String = Controls["Power Save Mode"].Choices[1]
  Controls["Smart Power Mode"].String = Controls["Smart Power Mode"].Choices[1]
  Controls["Advanced Power Management"].String = Controls["Smart Power Mode"].Choices[1]
  Controls["Eco Mode"].String = Controls["Eco Mode"].Choices[1]
  Controls["OPS Power Setting"].String = Controls["OPS Power Setting"].Choices[1]
  Controls["Input Source"].String = Controls["Input Source"].Choices[1]
  Controls["Boot On Source"].String = Controls["Boot On Source"].Choices[1]
  Controls["Signal Auto Detection"].String = Controls["Signal Auto Detection"].Choices[1]
  Controls["Remote Control Lock"].String = Controls["Remote Control Lock"].Choices[1]
  Controls["Keypad Lock"].String = Controls["Keypad Lock"].Choices[1]
  Controls["Gamma"].String = Controls["Gamma"].Choices[1]
  Controls["Picture Format"].String = Controls["Picture Format"].Choices[1]
  Controls["Video Signal Present"].Boolean = false
  Controls["Backlight"].Boolean = false
  Controls["Power"].Boolean = false
end

-- Called by the Initialize() function.
-- Clears text, values, or booleans on controls
function ResetTextIndicators()
  for i, control_name in ipairs(TextIndicators) do
    Controls[control_name].String = ""
  end
    for i, control_name in ipairs(ValueIndicators) do
    Controls[control_name].Value = 0
  end
end


function Connect()
  if not Controls["Connect"].Boolean then SetStatus(3, "Component Manually Disconnected"); Initialize() return socket:Disconnect() end
  if socket.IsConnected then socket:Disconnect() end
  if Controls["IP Address"].String == "" then return SetStatus(3, "No IP Address") end
  ip = Controls['IP Address'].String:match('(%d?%d?%d%.%d?%d?%d%.%d?%d?%d%.%d?%d?%d)');
  Controls["IP Address"].Color = ip and 'Green' or 'Red'
  if not ip then return print("User.Error: IP address invalid") end
  
  -- Connect
  socket:Connect(Controls["IP Address"].String, port)
end


function SetStatus(code, message, lookup)
  -- if there's a lookup key, fetch the code and message
  if lookup then
    code = status_tbl[lookup].code
    message = status_tbl[lookup].message
  end
  
  Controls["Status"].Value = code
  --Controls["Status"].String = string.format("%s%s%s", message, (message == "") and "" or ": ", ip and ip or "None")
  Controls["Status"].String = message
  --Controls["Status"].String = string.format("%s%s%s", message, (message == "") and (Controls["Power"].Boolean == true and "Display is ON - " or Controls["Power"].Boolean == false and "Display is OFF - ") or ": ", ip and ip or "None")

  if (code ~= 0) then return print(string.format("User.Info: Settings Status with Code: '%d', Message: '%s'", code, message)) end
  if (code == 2) then SetPresetColor() end
end


function EventLog(log, severity)
  Controls["Log Entry"].String = string.format("%s: %s", Controls["Event Log Prefix"].String, log)
  Controls["Log Severity"].String = severity
  if not sock.IsConnected then return end
  Controls["Log Trigger"]:Trigger()
end


socket.Connected = function()
  print("Connected!")

  -- Data received: Set numberOfReconnects to zero.
  numberOfReconnects = 0

  -- Set Polling command to begin again from the first item in the PollCommand table.
  ResponseWait = false
  CurrentPollCommand = 1
  PollTimer:Start(Controls["Poll Interval"].String)
  PollResponseTimer:Start(30)
end


socket.Reconnect = function()
  print("Reconnecting...")

  -- Increase the number of reconnects at each reconnect attempt.
  numberOfReconnects = numberOfReconnects + 1
end


socket.Closed = function(socket)
  print("TCP socket was closed by the remote end")
end


socket.Error = function(socket, err)
  print("TCP socket had an error:", err)

  -- Stop the PollTimer
  PollTimer:Stop()
  PollResponseTimer:Stop()

  -- SetStatus to Fault after a number of reconnect attempts.
  if numberOfReconnects >= 3 then
    SetStatus(2, string.format("Socket Disconnected. Reconnect attempts: "..numberOfReconnects))
  end
end


socket.Timeout = function(socket, err)
  print("TCP socket timed out", err)
end


socket.Data = function()
  local Rx = socket:Read(socket.BufferLength)

  -- Pass socket data (Rx) to the AddToDebug function that formats and prints to the console.
  AddToDebug ("RX", Rx)

  if Rx then
    -- This extracts a substring from Rx starting at position 5 and ending at the position given by string.byte(Rx:sub(1,1)) - 1.
    -- The end position is determined by the ASCII value of the first character of Rx minus 1.
    data = Rx:sub(5, string.byte( Rx:sub(1,1) ) - 1)
    --print(string.format("Return Data: %s", data))

    -- Print Hexidecmial representaion of data received.
    hex_data = ""
    for i = 1, #data do
      local char = data:sub(i, i)
      local hex_char = string.format("0x%02X", string.byte(char))
      hex_data = hex_data .. hex_char .. " "
    end
    print("Hexidecimal represenation of Return Data: "..hex_data)

    -- Data received: Set numberOfReconnects to zero.
    numberOfReconnects = 0

    -- Response received. Stop the PollResponseTimer.
    PollResponseTimer:Stop()

    -- Data received. Set status to OK.
    SetStatus(0, "")
  end

  -- ACK Reply (Acknowledgement) to SetCommands
  if string.find(Rx,"\x00\x06") then
    print("ACKNOWLEDGED: "..sLastCommandSent)
    
    -- Using string.sub to search the first 4 characters of sLastCommandSent:
    if string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setPOWER_STATE[1]) then
      print("Command Acknowledgment: Set Power - "..(Controls["Power"].Boolean == true and "ON" or Controls["Power"].Boolean == false and "OFF"))
      -- Update Status with Power state of Display.
      --SetStatus(0, (Controls["Power"].Boolean == true and "Display is ON" or Controls["Power"].Boolean == false and "Display is OFF"))

      Timer.CallAfter(function()
        -- set Polltimer to restart after 10 seconds.
        PollTimer:Start(Controls["Poll Interval"].String)

        -- Set ResponseWait to false as a response has been received to previous command.
        ResponseWait = false

        -- Start the PollResponseTimer again.
        PollResponseTimer:Start(30)
      end, 10)

      return -- This will stop the rest of this function so that the PollTimer is not restarted until after the 10 seconds.

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setCOLD_START_STATE[1]) then
      print("Command Acknowledgment: Set Cold Start State - "..Controls["Cold Start State"].String)   

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setPOWER_SAVE_MODE[1]) then
      print("Command Acknowledgment: Set Power Save Mode - "..Controls["Power Save Mode"].String)      
    
    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setSMART_POWER_MODE[1]) then
      print("Command Acknowledgment: Set Smart Power Mode - "..Controls["Smart Power Mode"].String)    
    
    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setADVANCED_POWER_MANAGEMENT[1]) then
      print("Command Acknowledgment: Set Advanced Power Management - "..Controls["Advanced Power Management"].String)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setECO_MODE[1]) then
      print("Command Acknowledgment: Set Eco Mode - "..Controls["Eco Mode"].String)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setBACKLIGHT[1]) then
      print("Command Acknowledgment: Set Backlight - "..(Controls["Backlight"].Boolean == true and "ON" or Controls["Backlight"].Boolean == false and "OFF"))

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setOPS_POWER_SETTING[1]) then
      print("Command Acknowledgment: Set OPS Power Setting - "..Controls["OPS Power Setting"].String)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setINPUT_SOURCE[1]) then
      print("Command Acknowledgment: Set Input Source - "..Controls["Input Source"].String)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setBOOT_SOURCE[1]) then
      print("Command Acknowledgment: Set Boot On Source - "..Controls["Boot On Source"].String)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setMONITOR_RESTART[1]) then
      print("Command Acknowledgment: Restart Android / Restart Scaler")
    
    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setSIGNAL_AUTO_DETECTION[1]) then
      print("Command Acknowledgment: Set Signal Auto Detection - "..Controls["Signal Auto Detection"].String)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setVOLUME[1]) then
      print("Command Acknowledgment: Speaker Volume - "..Controls["Speaker Volume"].Value.." : Audio Out Volume - "..Controls["Audio Out Volume"].Value)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setVOLUME_STEP[1]) then
      print("Command Acknowledgment: Speaker Volume / Audio Out Volume Adjusted")

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setMUTE[1]) then
      print("Command Acknowledgment: Set Mute - "..(Controls["Mute"].Boolean == true and "ON" or Controls["Mute"].Boolean == false and "OFF"))

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setSPEAKERS[1]) then
      print("Command Acknowledgment: Set Speakers - "..(Controls["Speakers"].Boolean == true and "ON" or Controls["Speakers"].Boolean == false and "OFF"))

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setREMOTELOCK[1]) then
      print("Command Acknowledgment: Set Remote Control Lock - "..Controls["Remote Control Lock"].String)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setKEYPADLOCK[1]) then
      print("Command Acknowledgment: Set Keypad Lock - "..Controls["Keypad Lock"].String)
    
    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setVIDEO_PARAMETERS[1]) then
      print("Command Acknowledgment: Set Video Parameters: Brightess: "..math.floor(Controls["Brightness"].Value)..", Colour: "..math.floor(Controls["Colour"].Value)..", Contrast: "..math.floor(Controls["Contrast"].Value)..", Sharpness: "..math.floor(Controls["Sharpness"].Value)..", Tint (Hue): "..math.floor(Controls["Tint (Hue)"].Value)..", Black Level: "..math.floor(Controls["Black Level"].Value)..", Gamma: "..Controls["Gamma"].String)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setPICTURE_FORMAT[1]) then
      print("Command Acknowledgment: Set Picture Format - "..Controls["Picture Format"].String)

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setFREEZEIMAGE[1]) then
      print("Command Acknowledgment: Set Freeze Image - "..(Controls["Freeze Image"].Boolean == true and "ON" or Controls["Freeze Image"].Boolean == false and "OFF"))

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setSTORAGELOCK[1]) then
      print("Command Acknowledgment: Set External Storage Lock - "..(Controls["External Storage Lock"].Boolean == true and "ON" or Controls["External Storage Lock"].Boolean == false and "OFF"))

    elseif string.sub(sLastCommandSent,1,4) == string.format("0x%02X", SetCommands.setSEND_SCREENSHOT[1]) then
      print("Command Acknowledgment: Screenshot of current source sent via email.")
    end


    -- May need to implement the PollStop after every SetCommand if the Polling is too quick ---------------------------------------------------------------------------------------------------------------
    Timer.CallAfter(function()
        -- Set ResponseWait to false as a response has been received to previous command.
        ResponseWait = false
        
        -- set Polltimer to restart after 3 seconds.
        PollTimer:Start(Controls["Poll Interval"].String)

        -- Start the PollResponseTimer again.
        PollResponseTimer:Start(30)
      end, 3)

    return -- This will stop the rest of this function so that PollTimer does not restart until after the 3 seconds.

  end
  
  -- SICP Version & Platform Information
  -- sLastCommandSent contains 2 hexidemical values.
  if string.find(Rx,"\xA2") then
    --print(string.format("0x%02X", GetCommands.getSICP_VERSION[1])..", "..string.format("0x%02X", GetCommands.getSICP_VERSION[2]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getSICP_VERSION[1])..", "..string.format("0x%02X", GetCommands.getSICP_VERSION[2]) then
      print("SICP Version: "..data)
      Controls["SICP Version"].String = data
    --print(string.format("0x%02X", GetCommands.getPLATFORM_LABEL[1])..", "..string.format("0x%02X", GetCommands.getPLATFORM_LABEL[2]))
    elseif sLastCommandSent == string.format("0x%02X", GetCommands.getPLATFORM_LABEL[1])..", "..string.format("0x%02X", GetCommands.getPLATFORM_LABEL[2]) then
      print("Platform Label: "..data)
      Controls["Platform Label"].String = data
    --print(string.format("0x%02X", GetCommands.getPLATFORM_VERSION[1]).." , "string.format("0x%02X", GetCommands.getPLATFORM_VERSION[2]))
    elseif sLastCommandSent == string.format("0x%02X", GetCommands.getPLATFORM_VERSION[1])..", "..string.format("0x%02X", GetCommands.getPLATFORM_VERSION[2]) then
      print("Platform Version: "..data)
      Controls["Platform Version"].String = data
    end
  end

  -- Model & Firmware Information
    -- sLastCommandSent contains 2 hexidemical values.
  if string.find(Rx,"\xA1") then
    --print(string.format("0x%02X", GetCommands.getMODEL_NUMBER[1])..", "..string.format("0x%02X", GetCommands.getMODEL_NUMBER[2]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getMODEL_NUMBER[1])..", "..string.format("0x%02X", GetCommands.getMODEL_NUMBER[2]) then
      print("Model Number: "..data)
      Controls["Model Number"].String = data
    --print(string.format("0x%02X", GetCommands.getFIRMWARE_VERSION[1])..", "..string.format("0x%02X", GetCommands.getFIRMWARE_VERSION[2]))
    elseif sLastCommandSent == string.format("0x%02X", GetCommands.getFIRMWARE_VERSION[1])..", "..string.format("0x%02X", GetCommands.getFIRMWARE_VERSION[2]) then
      print("Firmware Version: "..data)
      Controls["Firmware Version"].String = data
    --print(string.format("0x%02X", GetCommands.getBUILD_DATE[1])..", "..string.format("0x%02X", GetCommands.getBUILD_DATE[2]))
    elseif sLastCommandSent == string.format("0x%02X", GetCommands.getBUILD_DATE[1])..", "..string.format("0x%02X", GetCommands.getBUILD_DATE[2]) then
      print("Build Date: "..data)
      Controls["Build Date"].String = data
    --print(string.format("0x%02X", GetCommands.getANDROID_VERSION[1])..", "..string.format("0x%02X", GetCommands.getANDROID_VERSION[2]))
    elseif sLastCommandSent == string.format("0x%02X", GetCommands.getANDROID_VERSION[1])..", "..string.format("0x%02X", GetCommands.getANDROID_VERSION[2]) then
      print("Android Version: "..data)
      Controls["Android Version"].String = data
    --print(string.format("0x%02X", GetCommands.getHDMI_SWITCH_VERSION[1])..", "..string.format("0x%02X", GetCommands.getHDMI_SWITCH_VERSION[2]))
    elseif sLastCommandSent == string.format("0x%02X", GetCommands.getHDMI_SWITCH_VERSION[1])..", "..string.format("0x%02X", GetCommands.getHDMI_SWITCH_VERSION[2]) then
      print("HDMI Switch Version: "..data)
      Controls["HDMI Switch Version"].String = data
    --print(string.format("0x%02X", GetCommands.getLAN_FW_VERSION[1])..", "..string.format("0x%02X", GetCommands.getLAN_FW_VERSION[2]))
    elseif sLastCommandSent == string.format("0x%02X", GetCommands.getLAN_FW_VERSION[1])..", "..string.format("0x%02X", GetCommands.getLAN_FW_VERSION[2]) then
      print("LAN Firmware Version: "..data)
      Controls["LAN Firmware Version"].String = data
    --print(string.format("0x%02X", GetCommands.getHDMI_SWITCH2_VERSION[1]).." , "string.format("0x%02X", GetCommands.getHDMI_SWITCH2_VERSION[2]))
    elseif sLastCommandSent == string.format("0x%02X", GetCommands.getHDMI_SWITCH2_VERSION[1])..", "..string.format("0x%02X", GetCommands.getHDMI_SWITCH2_VERSION[2]) then
      print("HDMI Switch 2 Version: "..data)
      Controls["HDMI Switch 2 Version"].String = data
    end
  end

  -- Operating Hours
  -- sLastCommandSent contains 2 hexidemical values.
  if string.find(Rx,"\x0F") then
    --print(string.format("0x%02X", GetCommands.getOPERATING_HOURS[1])..", "..string.format("0x%02X", GetCommands.getOPERATING_HOURS[2]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getOPERATING_HOURS[1])..", "..string.format("0x%02X", GetCommands.getOPERATING_HOURS[2]) then
      print("Operating Hours: "..(string.byte(data,1) << 8) + string.byte(data,2))
      Controls["Operating Hours"].String = (string.byte(data,1) << 8) + string.byte(data,2)
    end
  end

  -- Temperature Sensors
  if string.find(Rx,"\x2F") then
    --print(string.format("0x%02X", GetCommands.getTEMPERATURE_SENSOR[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getTEMPERATURE_SENSOR[1]) then
      print("Temperature Sensor 1: "..string.byte(data:sub(1,1)).."°C")
      Controls["Temperature Sensor 1"].String = (string.byte(data:sub(1,1)).."°C")
      print("Temperature Sensor 2: "..string.byte(data:sub(2,2)).."°C")
      Controls["Temperature Sensor 2"].String = (string.byte(data:sub(2,2)).."°C")
    end
  end

  -- Serial Number
  if string.find(Rx,"\x15") then
    --print(string.format("0x%02X", GetCommands.getSERIAL_NUMBER[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getSERIAL_NUMBER[1]) then
      print("Serial Number: "..data)
      Controls["Serial Number"].String = data
    end
  end

  -- Video Signal Present on current selected input. (Works even when in standby.)
  if string.find(Rx,"\x59") then
      --print(string.format("0x%02X", GetCommands.getVIDEO_SIGNAL_PRESENT[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getVIDEO_SIGNAL_PRESENT[1]) then
      print("Video Signal: "..(string.byte(data:sub(1,1)) == 1 and "Present" or (string.byte(data:sub(1,1)) == 0 and "Not Present")))
      Controls["Video Signal Present"].Value = (string.byte(data:sub(1,1)))
    end
  end

  -- Power State
  -- 0x01 = Power Off
  -- 0x02 = Power On
  if string.find(Rx,"\x19") then
    --print(string.format("0x%02X", GetCommands.getPOWER_STATE[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getPOWER_STATE[1]) then
      local powerstate = string.byte(data:sub(1,1))
      print("Power State: "..(string.byte(data:sub(1,1)) == 1 and "OFF" or (string.byte(data:sub(1,1)) == 2 and "ON")))
      if powerstate == 1 then
        Controls["Power"].Boolean = false
        --SetStatus(0, (Controls["Power"].Boolean == true and "Display is ON" or Controls["Power"].Boolean == false and "Display is OFF"))
      elseif powerstate == 2 then
        Controls["Power"].Boolean = true
        --SetStatus(0, (Controls["Power"].Boolean == true and "Display is ON" or Controls["Power"].Boolean == false and "Display is OFF"))
      end
    end
  end

  -- Power state at Cold Start
  -- 0x00 = Power Off
  -- 0x01 = Forced On
  -- 0x02 = Last Status
  -- Controls["Cold Start State"].Choices = {'--- Select ---', 'Power Off', 'Forced On', 'Last Status'}
  if string.find(Rx,"\xA4") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getCOLD_START_STATE[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getCOLD_START_STATE[1]) then
      local coldstartstate = string.byte(data:sub(1,1))
      print("Power at Cold Start: "..(string.byte(data:sub(1,1)) == 0 and "Power Off" or (string.byte(data:sub(1,1)) == 1 and "Forced On" or (string.byte(data:sub(1,1)) == 2 and "Last Status"))))
      if coldstartstate == 0 then
        Controls["Cold Start State"].String = Controls["Cold Start State"].Choices[2]
      elseif coldstartstate == 1 then 
        Controls["Cold Start State"].String = Controls["Cold Start State"].Choices[3]
      elseif coldstartstate == 2 then 
        Controls["Cold Start State"].String = Controls["Cold Start State"].Choices[4]
      end 
    end
  end

  -- Power Save Mode
  -- 0x00 = RGB Off & Video Off
  -- 0x01 = RGB Off, Video On
  -- 0x02 = RGB On, Video Off
  -- 0x03 = RGB On & Video On
  -- 0x04 = mode 1
  -- 0x05 = mode 2
  -- 0x06 = mode 3
  -- 0x07 = mode 4
  -- Controls["Power Save Mode"].Choices = {'--- Select ---', 'RGB Off & Video Off', 'RBG Off, Video On', 'RBG On, Video Off', 'RGB On & Video On', 'Mode 1', 'Mode 2', 'Mode 3', 'Mode 4'}
  if string.find(Rx,"\xD3") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getPOWER_SAVE_MODE[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getPOWER_SAVE_MODE[1]) then
      local powersavemode = string.byte(data:sub(1,1))
      print("Power Save Mode: "..(string.byte(data:sub(1,1)) == 0 and "RGB Off & Video Off" or (string.byte(data:sub(1,1)) == 1 and "RGB Off, Video On" or (string.byte(data:sub(1,1)) == 2 and "RGB On, Video Off" or (string.byte(data:sub(1,1)) == 3 and "RGB On & Video On" or (string.byte(data:sub(1,1)) == 4 and "Mode 1" or (string.byte(data:sub(1,1)) == 5 and "Mode 2" or (string.byte(data:sub(1,1)) == 6 and "Mode 3" or (string.byte(data:sub(1,1)) == 7 and "Mode 4")))))))))
      if powersavemode == 0 then
        Controls["Power Save Mode"].String = Controls["Power Save Mode"].Choices[2]
      elseif powersavemode == 1 then 
        Controls["Power Save Mode"].String = Controls["Power Save Mode"].Choices[3]
      elseif powersavemode == 2 then 
        Controls["Power Save Mode"].String = Controls["Power Save Mode"].Choices[4]
      elseif powersavemode == 3 then 
        Controls["Power Save Mode"].String = Controls["Power Save Mode"].Choices[5]
      elseif powersavemode == 4 then 
        Controls["Power Save Mode"].String = Controls["Power Save Mode"].Choices[6]
      elseif powersavemode == 5 then 
        Controls["Power Save Mode"].String = Controls["Power Save Mode"].Choices[7]
      elseif powersavemode == 6 then 
        Controls["Power Save Mode"].String = Controls["Power Save Mode"].Choices[8]
      elseif powersavemode == 7 then 
        Controls["Power Save Mode"].String = Controls["Power Save Mode"].Choices[9]
      end
    end
  end

  -- Smart Power Mode
  -- 0x00 = Off
  -- 0x01 = Low (defined to be same as OFF)
  -- 0x02 = Medium
  -- 0x03 = High
  -- Controls["Smart Power Mode"].Choices = {'--- Select ---', 'Off', 'Low', 'Medium', 'High'}
  if string.find(Rx,"\xDE") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getSMART_POWER_MODE[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getSMART_POWER_MODE[1]) then
      local smartpowermode = string.byte(data:sub(1,1))
      print("Smart Power Mode: "..(string.byte(data:sub(1,1)) == 0 and "Off" or (string.byte(data:sub(1,1)) == 1 and "Low" or (string.byte(data:sub(1,1)) == 2 and "Medium" or (string.byte(data:sub(1,1)) == 3 and "High" )))))
      if smartpowermode == 0 then
        Controls["Smart Power Mode"].String = Controls["Smart Power Mode"].Choices[2]
      elseif smartpowermode == 1 then 
        Controls["Smart Power Mode"].String = Controls["Smart Power Mode"].Choices[3]
      elseif smartpowermode == 2 then 
        Controls["Smart Power Mode"].String = Controls["Smart Power Mode"].Choices[4]
      elseif smartpowermode == 3 then 
        Controls["Smart Power Mode"].String = Controls["Smart Power Mode"].Choices[5]
      end
    end
  end

  -- Advanced Power Management
  -- 0x00 = Off
  -- 0x01 = On
  -- 0x02 = Mode 1 (TCP off / WOL on)
  -- 0x03 = Mode 2 (TCP on / WOL off)
  -- Controls["Advanced Power Management"].Choices = {'--- Select ---', 'Off', 'On', 'Mode 1 (TCP Off / WOL On)', 'Mode 2 (TCP On / WOL Off)'}
  if string.find(Rx,"\xD0") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getADVANCED_POWER_MANAGEMENT[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getADVANCED_POWER_MANAGEMENT[1]) then
      local advancedpowermanagement = string.byte(data:sub(1,1))
      print("Advanced Power Management: "..(string.byte(data:sub(1,1)) == 0 and "Off" or (string.byte(data:sub(1,1)) == 1 and "On" or (string.byte(data:sub(1,1)) == 2 and "Mode 1 (TCP Off / WOL On)" or (string.byte(data:sub(1,1)) == 3 and "Mode 2 (TCP On / WOL Off)" )))))
      if advancedpowermanagement == 0 then
        Controls["Advanced Power Management"].String = Controls["Advanced Power Management"].Choices[2]
      elseif advancedpowermanagement == 1 then 
        Controls["Advanced Power Management"].String = Controls["Advanced Power Management"].Choices[3]
      elseif advancedpowermanagement == 2 then 
        Controls["Advanced Power Management"].String = Controls["Advanced Power Management"].Choices[4]
      elseif advancedpowermanagement == 3 then 
        Controls["Advanced Power Management"].String = Controls["Advanced Power Management"].Choices[5]
      end
    end
  end

  -- Eco Mode
  -- 0x00 = Off
  -- 0x01 = On
  -- Controls["Eco Mode"].Choices = {'--- Select ---', 'Off', 'On'}
  if string.find(Rx,"\x63") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getECO_MODE[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getECO_MODE[1]) then
      local ecomode = string.byte(data:sub(1,1))
      print("Eco Mode: "..(string.byte(data:sub(1,1)) == 0 and "OFF" or (string.byte(data:sub(1,1)) == 1 and "ON" )))
      if ecomode == 0 then
        Controls["Eco Mode"].String = Controls["Eco Mode"].Choices[2]
      elseif ecomode == 1 then 
        Controls["Eco Mode"].String = Controls["Eco Mode"].Choices[3]
      end
    end
  end

  -- Backlight. Current Backlight state.
  -- 0x00 = On
  -- 0x01 = Off
  if string.find(Rx,"\x71") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getBACKLIGHT[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getBACKLIGHT[1]) then
      print("Backlight is: "..(string.byte(data:sub(1,1)) == 1 and "OFF" or (string.byte(data:sub(1,1)) == 0 and "ON")))
      if (string.byte(data:sub(1,1))) == 0 then Controls["Backlight"].Boolean = true end
      if (string.byte(data:sub(1,1))) == 1 then Controls["Backlight"].Boolean = false end
    end
  end

  -- OPS/SDM Power Setting
  -- 0x00 = Always Off
  -- 0x01 = Always On
  -- 0x02 = Auto
  -- Controls["OPS Power Setting"].Choices = {'--- Select ---', 'Always Off', 'Always On', 'Auto'}
  if string.find(Rx,"\x6E") then
      --print(sLastCommandSent, string.format("0x%02X", GetCommands.getOPS_POWER_SETTING[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getOPS_POWER_SETTING[1]) then
      local opspowersetting = string.byte(data:sub(1,1))
      print("OPS Power Setting: "..(string.byte(data:sub(1,1)) == 0 and "Always Off" or (string.byte(data:sub(1,1)) == 1 and "Always On" or (string.byte(data:sub(1,1)) == 2 and "Auto" ))))
      if opspowersetting == 0 then
        Controls["OPS Power Setting"].String = Controls["OPS Power Setting"].Choices[2]
      elseif opspowersetting == 1 then 
        Controls["OPS Power Setting"].String = Controls["OPS Power Setting"].Choices[3]
      elseif opspowersetting == 2 then 
        Controls["OPS Power Setting"].String = Controls["OPS Power Setting"].Choices[4]
      end
    end
  end

  -- Input Source
  if string.find(Rx,"\xAD") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getINPUT_SOURCE[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getINPUT_SOURCE[1]) then
     
      -- If Browser, Media Player or PDF Player are the input source, also show playlist file number or URL number
      if AllInputSources[(string.byte(data:sub(1,1)))] == "BROWSER" or AllInputSources[(string.byte(data:sub(1,1)))] == "Media Player" or AllInputSources[(string.byte(data:sub(1,1)))] == "PDF Player" then
        Controls["Input Source"].String = AllInputSources[(string.byte(data:sub(1,1)))].." - "..AllPlaylistTags[(string.byte(data:sub(2,2)))]
        print("Input Source: "..AllInputSources[(string.byte(data:sub(1,1)))]..", Playlist or URL: "..AllPlaylistTags[(string.byte(data:sub(2,2)))])
      else
        print("Input Source: "..AllInputSources[(string.byte(data:sub(1,1)))])
        Controls["Input Source"].String = AllInputSources[(string.byte(data:sub(1,1)))]
      end
    end
  end

  -- Boot on Source
  if string.find(Rx,"\xBA") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getBOOT_SOURCE[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getBOOT_SOURCE[1]) then    
      
      -- If Browser, Media Player or PDF Player are the boot source, also show playlist file number or URL number
      if AllBootOnSources[(string.byte(data:sub(1,1)))] == "BROWSER" or AllBootOnSources[(string.byte(data:sub(1,1)))] == "Media Player" or AllBootOnSources[(string.byte(data:sub(1,1)))] == "PDF Player" then
        Controls["Boot On Source"].String = AllBootOnSources[(string.byte(data:sub(1,1)))].." - "..AllPlaylistTags[(string.byte(data:sub(2,2)))]
        print("Boot Source: "..AllBootOnSources[(string.byte(data:sub(1,1)))]..", Playlist or URL: "..AllPlaylistTags[(string.byte(data:sub(2,2)))])
      else
        print("Boot on Source: "..AllBootOnSources[(string.byte(data:sub(1,1)))])
        Controls["Boot On Source"].String = AllBootOnSources[(string.byte(data:sub(1,1)))]
      end
    end
  end

  -- Number Of Input Sources & Source Names
  if string.find(Rx,"\xAB") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getNUMBER_OF_INPUT_SOURCES[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getNUMBER_OF_INPUT_SOURCES[1]) then

      print("Number of Input Sources: "..(string.byte(data:sub(1,1))))
      Controls["Number Of Input Sources"].String = (string.byte(data:sub(1,1)))
      
      -- Reset the InputSources{} and BootOnSources tables on each response so the table doesn't continuously grow.
      InputSources = {'--- Select ---'}
      BootOnSources = {'--- Select ---', 'Last Input'}
      
      -- The SICP response will detail each input type.
      local numberofinputs = (string.byte(data:sub(1,1)))
        for i=2, numberofinputs+1 do
          --print((string.byte(data:sub(i,i))))
          print(string.format("Extracted data: 0x%02X", string.byte(data:sub(i,i))))
          -- Convert response data to text Description and add input sources to Input Source control selection using InputSources table.
          -- Convert response data to text Description and add input sources to Boot On Source control selection using BootOnSources table.
          -- Find the value within the AllInputSources table.
          print(AllInputSources[(string.byte(data:sub(i,i)))])
          table.insert(InputSources, AllInputSources[(string.byte(data:sub(i,i)))])
          table.insert(BootOnSources, AllBootOnSources[(string.byte(data:sub(i,i)))])
        end
        
        -- Print the InputSources table.
        for i,v in ipairs(InputSources) do 
          print(i,v)
        end

        -- Update the Input Source and Boot On Source control with valid inputs.
        Controls["Input Source"].Choices = InputSources
        Controls["Boot On Source"].Choices = BootOnSources
    end
  end

  -- Signal Auto Detection
  -- 0x00 = Off
  -- 0x01 = All
  -- 0x02 = Reserved
  -- 0x03 = PC sources only
  -- 0x04 = Video sources only 0x05 = Failover
  -- Controls["Signal Auto Detection"].Choices = {'--- Select ---', 'Off', 'All', 'Reserved', 'PC Sources Only', 'Video Sources Only', 'Failover'}
  if string.find(Rx,"\xAF") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getSIGNAL_AUTO_DETECTION[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getSIGNAL_AUTO_DETECTION[1]) then
      local signaldetect = string.byte(data:sub(1,1))
      print("Auto Signal Detection: "..(string.byte(data:sub(1,1)) == 0 and "Off" or (string.byte(data:sub(1,1)) == 1 and "All" or (string.byte(data:sub(1,1)) == 2 and "Reserved" or (string.byte(data:sub(1,1)) == 3 and "PC Sources Only" or (string.byte(data:sub(1,1)) == 4 and "Video Sources Only" or (string.byte(data:sub(1,1)) == 5 and "Failover" )))))))
      if signaldetect == 0 then
        Controls["Signal Auto Detection"].String = Controls["Signal Auto Detection"].Choices[2]
      elseif signaldetect == 1 then 
        Controls["Signal Auto Detection"].String = Controls["Signal Auto Detection"].Choices[3]
      elseif signaldetect == 2 then 
        Controls["Signal Auto Detection"].String = Controls["Signal Auto Detection"].Choices[4]
      elseif signaldetect == 3 then 
        Controls["Signal Auto Detection"].String = Controls["Signal Auto Detection"].Choices[5]
      elseif signaldetect == 4 then 
        Controls["Signal Auto Detection"].String = Controls["Signal Auto Detection"].Choices[6]
      elseif signaldetect == 5 then 
        Controls["Signal Auto Detection"].String = Controls["Signal Auto Detection"].Choices[7]
      end
    end
  end

  -- Volume
  if string.find(Rx,"\x45") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getVOLUME[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getVOLUME[1]) then
      local speakervolume = string.byte(data:sub(1,1))
      local audiooutvolume = string.byte(data:sub(2,2))
      print("Speaker Volume: "..(string.byte(data:sub(1,1))))
      print("Audio Out Volume: "..(string.byte(data:sub(2,2))))
      Controls["Speaker Volume"].Value = speakervolume
      Controls["Audio Out Volume"].Value = audiooutvolume
    end
  end

  -- Mute
  -- 0x00 = Mute Off
  -- 0x01 = Mute On
  if string.find(Rx,"\x46") then
    --print(string.format("0x%02X", GetCommands.getMUTE[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getMUTE[1]) then
      local mutestate = string.byte(data:sub(1,1))
      print("Mute State: "..(string.byte(data:sub(1,1)) == 0 and "OFF" or (string.byte(data:sub(1,1)) == 1 and "ON")))
      if mutestate == 0 then
        Controls["Mute"].Boolean = false
      elseif mutestate == 1 then
        Controls["Mute"].Boolean = true
      end
    end
  end

  -- Speakers (On/Off)
  -- 0x00 = Speakers Off
  -- 0x01 = Speakers On
  if string.find(Rx,"\x8E") then
    --print(string.format("0x%02X", GetCommands.getSPEAKERS[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getSPEAKERS[1]) then
      local speakerstate = string.byte(data:sub(1,1))
      print("Speakers State: "..(string.byte(data:sub(1,1)) == 0 and "OFF" or (string.byte(data:sub(1,1)) == 1 and "ON")))
      if speakerstate == 0 then
        Controls["Mute"].Boolean = false
      elseif speakerstate == 1 then
        Controls["Mute"].Boolean = true
      end
    end
  end

  -- Remote Control Lock
  -- 0x01 = Unlock all
  -- 0x02 = Lock all
  -- 0x03 = Lock all but Power
  -- 0x04 = Lock all but Volume
  -- 0x05 = Primary (Master)
  -- 0x06 = Secondary (Daisy chain PD)
  -- 0x07 = Lock all except Power & Volume
  -- Controls["Remote Control Lock"].Choices = {'--- Select ---', 'Unlock All', 'Lock All', 'Lock All Except Power', 'Lock All Except Volume', 'Primary (Master)', 'Secondary (Daisy Chain)', 'Lock All Except Power & Volume'}
  if string.find(Rx,"\x1D") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getREMOTELOCK[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getREMOTELOCK[1]) then
      local remotelock = string.byte(data:sub(1,1))
      print("Remote Lock: "..(string.byte(data:sub(1,1)) == 1 and "Unlock All" or (string.byte(data:sub(1,1)) == 2 and "Lock All" or (string.byte(data:sub(1,1)) == 3 and "Lock All Except Power" or (string.byte(data:sub(1,1)) == 4 and "Lock All Except Volume" or (string.byte(data:sub(1,1)) == 5 and "Primary (Master)" or (string.byte(data:sub(1,1)) == 6 and "Secondary (Daisy Chain)" or (string.byte(data:sub(1,1)) == 7 and "Lock All Except Power & Volume" ))))))))
      if remotelock == 1 then
        Controls["Remote Control Lock"].String = Controls["Remote Control Lock"].Choices[2]
      elseif remotelock == 2 then 
        Controls["Remote Control Lock"].String = Controls["Remote Control Lock"].Choices[3]
      elseif remotelock == 3 then 
        Controls["Remote Control Lock"].String = Controls["Remote Control Lock"].Choices[4]
      elseif remotelock == 4 then 
        Controls["Remote Control Lock"].String = Controls["Remote Control Lock"].Choices[5]
      elseif remotelock == 5 then 
        Controls["Remote Control Lock"].String = Controls["Remote Control Lock"].Choices[6]
      elseif remotelock == 6 then 
        Controls["Remote Control Lock"].String = Controls["Remote Control Lock"].Choices[7]
      elseif remotelock == 7 then 
        Controls["Remote Control Lock"].String = Controls["Remote Control Lock"].Choices[8]
      end
    end
  end

  -- Keypad Lock
  -- 0x01 = Unlock all
  -- 0x02 = Lock all
  -- 0x03 = Lock all but Power
  -- 0x04 = Lock all but Volume
  -- 0x07 = Lock all except Power & Volume
  -- Controls["Keypad Lock"].Choices = {'--- Select ---', 'Unlock All', 'Lock All', 'Lock All Except Power', 'Lock All Except Volume', 'Lock All Except Power & Volume'}
  if string.find(Rx,"\x1B") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getKEYPADLOCK[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getKEYPADLOCK[1]) then
      local keypadlock = string.byte(data:sub(1,1))
      print("Keypad Lock: "..(string.byte(data:sub(1,1)) == 1 and "Unlock All" or (string.byte(data:sub(1,1)) == 2 and "Lock All" or (string.byte(data:sub(1,1)) == 3 and "Lock All Except Power" or (string.byte(data:sub(1,1)) == 4 and "Lock All Except Volume" or (string.byte(data:sub(1,1)) == 7 and "Lock All Except Power & Volume" ))))))
      if keypadlock == 1 then
        Controls["Keypad Lock"].String = Controls["Keypad Lock"].Choices[2]
      elseif keypadlock == 2 then 
        Controls["Keypad Lock"].String = Controls["Keypad Lock"].Choices[3]
      elseif keypadlock == 3 then 
        Controls["Keypad Lock"].String = Controls["Keypad Lock"].Choices[4]
      elseif keypadlock == 4 then 
        Controls["Keypad Lock"].String = Controls["Keypad Lock"].Choices[5]
      elseif keypadlock == 7 then 
        Controls["Keypad Lock"].String = Controls["Keypad Lock"].Choices[6]
      end
    end
  end

  -- Video Parameters
  -- Controls["Gamma"].Choices = {'--- Select ---', 'Native', 'S Gamma', '2.2', '2.4', 'D-Image (DICOM Gamma)'}
  if string.find(Rx,"\x33") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getVIDEO_PARAMETERS[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getVIDEO_PARAMETERS[1]) then
      local brightness = string.byte(data:sub(1,1))
      local colour = string.byte(data:sub(2,2))
      local contrast = string.byte(data:sub(3,3))
      local sharpness = string.byte(data:sub(4,4))
      local tint_hue = string.byte(data:sub(5,5))
      local black_level = string.byte(data:sub(6,6))
      local gamma = string.byte(data:sub(7,7))
      print("Brightness: "..(string.byte(data:sub(1,1))))
      print("Colour: "..(string.byte(data:sub(2,2))))
      print("Contrast: "..(string.byte(data:sub(3,3))))
      print("Sharpness: "..(string.byte(data:sub(4,4))))
      print("Tint (Hue): "..(string.byte(data:sub(5,5))))
      print("Black Level: "..(string.byte(data:sub(6,6))))
      print("Gamma Selection: "..(string.byte(data:sub(7,7)) == 1 and "Native" or (string.byte(data:sub(7,7)) == 2 and "S Gamma" or (string.byte(data:sub(7,7)) == 3 and "2.2" or (string.byte(data:sub(7,7)) == 4 and "2.4" or (string.byte(data:sub(7,7)) == 5 and "D-Image (DICOM Gamma)"))))))
      Controls["Brightness"].Value = brightness
      Controls["Colour"].Value = colour
      Controls["Contrast"].Value = contrast
      Controls["Sharpness"].Value = sharpness
      Controls["Tint (Hue)"].Value = tint_hue
      Controls["Black Level"].Value = black_level

      if gamma == 1 then
        Controls["Gamma"].String = Controls["Gamma"].Choices[2]
      elseif gamma == 2 then 
        Controls["Gamma"].String = Controls["Gamma"].Choices[3]
      elseif gamma == 3 then 
        Controls["Gamma"].String = Controls["Gamma"].Choices[4]
      elseif gamma == 4 then 
        Controls["Gamma"].String = Controls["Gamma"].Choices[5]
      elseif gamma == 5 then 
        Controls["Gamma"].String = Controls["Gamma"].Choices[6]
      end
    end
  end

  -- Picture Format
  -- 0x00 = Normal (4:3)
  -- 0x01 = Custom
  -- 0x02 = Real (1:1)
  -- 0x03 = Full
  -- 0x04 = 21:9
  -- 0x05 = Dynamic
  -- 0x06 = 16:9
-- Controls["Picture Format"].Choices = {'--- Select ---', 'Normal (4:3)', 'Custom', 'Real (1:1)', 'Full', '21:9', 'Dynamic', '16:9'}
  if string.find(Rx,"\x3B") then
    --print(sLastCommandSent, string.format("0x%02X", GetCommands.getPICTURE_FORMAT[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getPICTURE_FORMAT[1]) then
      local pictureformat = string.byte(data:sub(1,1))
      print("Picture Format: "..(string.byte(data:sub(1,1)) == 0 and "Normal (4:3)" or (string.byte(data:sub(1,1)) == 1 and "Custom" or (string.byte(data:sub(1,1)) == 2 and "Real (1:1)" or (string.byte(data:sub(1,1)) == 3 and "Full" or (string.byte(data:sub(1,1)) == 4 and "21:9" or (string.byte(data:sub(1,1)) == 5 and "Dynamic" or (string.byte(data:sub(1,1)) == 6 and "16:9" ) )))))))
      if pictureformat == 0 then
        Controls["Picture Format"].String = Controls["Picture Format"].Choices[2]
      elseif pictureformat == 1 then 
        Controls["Picture Format"].String = Controls["Picture Format"].Choices[3]
      elseif pictureformat == 2 then 
        Controls["Picture Format"].String = Controls["Picture Format"].Choices[4]
      elseif pictureformat == 3 then 
        Controls["Picture Format"].String = Controls["Picture Format"].Choices[5]
      elseif pictureformat == 4 then 
        Controls["Picture Format"].String = Controls["Picture Format"].Choices[6]
      elseif pictureformat == 5 then 
        Controls["Picture Format"].String = Controls["Picture Format"].Choices[7]
      elseif pictureformat == 6 then 
        Controls["Picture Format"].String = Controls["Picture Format"].Choices[8]
      end
    end
  end

  -- Image Freeze
  -- 0x00 = screen is not frozen
  -- 0x01 = screen is frozen
  if string.find(Rx,"\x76") then
    --print(string.format("0x%02X", GetCommands.getFREEZEIMAGE[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getFREEZEIMAGE[1]) then
      local freezestate = string.byte(data:sub(1,1))
      print("Freeze Image State: "..(string.byte(data:sub(1,1)) == 0 and "OFF" or (string.byte(data:sub(1,1)) == 1 and "ON")))
      if freezestate == 0 then
        Controls["Freeze Image"].Boolean = false
      elseif freezestate == 1 then
        Controls["Freeze Image"].Boolean = true
      end
    end
  end

  -- External Storage Lock (MicroSD/USB Lock)
  -- 0x00 = Unlocked (default)
  -- 0x01 = Locked
  if string.find(Rx,"\xF2") then
    --print(string.format("0x%02X", GetCommands.getSTORAGELOCK[1]))
    if sLastCommandSent == string.format("0x%02X", GetCommands.getSTORAGELOCK[1]) then
      local externallockstate = string.byte(data:sub(1,1))
      print("External Storage Lock State: "..(string.byte(data:sub(1,1)) == 0 and "OFF" or (string.byte(data:sub(1,1)) == 1 and "ON")))
      if externallockstate == 0 then
        Controls["External Storage Lock"].Boolean = false
      elseif externallockstate == 1 then
        Controls["External Storage Lock"].Boolean = true
      end
    end
  end



  -- NACK Reply
  if string.find(Rx,"\x00\x15") then
    -- see if the last command sent is in the SetCommands table, and if yes, print the command key.
    local function findKeyByValue(sLastCommandSent)
      for key, value in pairs(SetCommands) do
        for i, v in ipairs(value) do
          --print(string.format("0x%02X", v), sLastCommandSent)
          if string.format("0x%02X", v) == string.sub(sLastCommandSent, 1,4) then
            print("Found "..sLastCommandSent.." in "..key)
            return key
          end
        end
      end
      for key, value in pairs(GetCommands) do
        for i, v in ipairs(value) do
          --print(string.format("0x%02X", v), sLastCommandSent)
          if string.format("0x%02X", v) == string.sub(sLastCommandSent, 1,4) then
            print("Found "..sLastCommandSent.." in "..key)
            return key
          end
        end
      end
      return nil
    end
    
    local key = findKeyByValue(sLastCommandSent)

    print("NACK - Not Acknowledged: Checksum/Format error. Commands Sent: "..key)
  end


  -- NAV Reply (Not Available in the version of SICP running on the device.)
  if string.find(Rx,"\x00\x18") then
    -- see if the sLastCommandSent is in the SetCommands table, and if yes, print the command key.
    local function findKeyByValue(sLastCommandSent)
      for key, value in pairs(SetCommands) do
        for i, v in ipairs(value) do
          --print(string.format("0x%02X", v), sLastCommandSent)
          if string.format("0x%02X", v) == string.sub(sLastCommandSent, 1,4) then
            print("Found "..sLastCommandSent.." in "..key)
            return key
          end
        end
      end

      -- see if the sLastCommandSent is in the GetCommands table, and if yes, print the command key.
      -- the below for loop is checking for the 2nd hexidecimal item in the GetCommands table (if there is a second eg. getANDROID_VERSION = {0xA1, 0x03})
      for key, value in pairs(GetCommands) do
        for i, v in ipairs(value) do
          --print(string.format("0x%02X", v), sLastCommandSent)
          if string.format("0x%02X", v) == string.sub(sLastCommandSent, 7,10) then
            print("Found "..sLastCommandSent.." in "..key)
            return key
          end
        end
      end
    
    -- see if the sLastCommandSent is in the GetCommands table, and if yes, print the command key.
    -- the below loop is for checking for the 1st hexidecimal items in the GetCommands table (most only have 1 eg. getINPUT_SOURCE = {0xAD})
    if key == nil then
      for key, value in pairs(GetCommands) do
        for i, v in ipairs(value) do
          --print(string.format("0x%02X", v), sLastCommandSent)
          if string.format("0x%02X", v) == string.sub(sLastCommandSent, 1,4) then
            print("Found "..sLastCommandSent.." in "..key)
            return key
          end
        end
      end
    end
      return nil
    end
    
    local key = findKeyByValue(sLastCommandSent)

    if key then
      print("NAV - Not Available: Command "..key.." is valid but not supported in the current SICP implementation.")
      
      -- Updating controls to "n/a" for known NAV GetCommand responses.
      if key == "getANDROID_VERSION" then
        Controls["Android Version"].String = "n/a"
      elseif key == "getHDMI_SWITCH_VERSION" then
        Controls["HDMI Switch Version"].String = "n/a"
      elseif key == "getLAN_FW_VERSION" then
        Controls["LAN Firmware Version"].String = "n/a"
      elseif key == "getHDMI_SWITCH2_VERSION" then
        Controls["HDMI Switch 2 Version"].String = "n/a"
      end

    else 
      print("NAV - Not Available: Command is valid but not supported in the current SICP implementation.")
    end
  end

  -- Set ResponseWait to false as a response has been received to previous command.
  ResponseWait = false

  -- Restart PollTimer so Polling can continue.
  PollTimer:Start(Controls["Poll Interval"].String)
  --print("Polling Restarted.")
  
  -- Start the PollResponseTimer again.
  PollResponseTimer:Start(30)

end





-- Control EventHandlers --

-- setPOWER_STATE_OFF = "\x06\x01\x00\x18\x01\x1E",
-- setPOWER_STATE_ON = "\x06\x01\x00\x18\x02\x1D",
Controls["Power"].EventHandler = function(ctl)
  -- Insert the Data[1] byte into the setSMART_POWER_MODE table.
  if ctl.Boolean then
    table.insert(SetCommands.setPOWER_STATE, 0x02)
  else
    table.insert(SetCommands.setPOWER_STATE, 0x01)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setPOWER_STATE)
  table.remove(SetCommands.setPOWER_STATE, 2) 
end

-- Controls["Cold Start State"].Choices = {'--- Select ---', 'Power Off', 'Forced On', 'Last Status'}
-- setCOLD_START_STATE_OFF = "\x06\x01\x00\xA3\x00\xA4", 
-- setCOLD_START_STATE_ON = "\x06\x01\x00\xA3\x01\xA5",
-- setCOLD_START_STATE_LASTSTATUS = "\x06\x01\x00\xA3\x02\xA6",
Controls["Cold Start State"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setSMART_POWER_MODE table.
  if ctl.String == "Power Off" then
    table.insert(SetCommands.setCOLD_START_STATE, 0x00)
  elseif ctl.String == "Forced On" then
    table.insert(SetCommands.setCOLD_START_STATE, 0x01)
  elseif ctl.String == "Last Status" then
    table.insert(SetCommands.setCOLD_START_STATE, 0x02)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setCOLD_START_STATE)
  table.remove(SetCommands.setCOLD_START_STATE, 2) 
end

-- Controls["Power Save Mode"].Choices = {'--- Select ---', 'RGB Off & Video Off', 'RBG Off, Video On', 'RBG On, Video Off', 'RGB On & Video On', 'Mode 1', 'Mode 2', 'Mode 3', 'Mode 4'}
-- setPOWER_SAVE_MODE_ROFFVOFF = "\x06\x01\x00\xD2\x00\xD5", -- NAV - Not Available on xxBDL3511Q
-- setPOWER_SAVE_MODE_ROFFVON = "\x06\x01\x00\xD2\x01\xD4", -- NAV - Not Available on xxBDL3511Q
-- setPOWER_SAVE_MODE_RONVOFF = "\x06\x01\x00\xD2\x02\xD7", -- NAV - Not Available on xxBDL3511Q
-- setPOWER_SAVE_MODE_RONVON = "\x06\x01\x00\xD2\x03\xD6", -- NAV - Not Available on xxBDL3511Q
-- setPOWER_SAVE_MODE_MODE1 = "\x06\x01\x00\xD2\x04\xD1",
-- setPOWER_SAVE_MODE_MODE2 = "\x06\x01\x00\xD2\x05\xD0",
-- setPOWER_SAVE_MODE_MODE3 = "\x06\x01\x00\xD2\x06\xD3",
-- setPOWER_SAVE_MODE_MODE4 = "\x06\x01\x00\xD2\x07\xD2",
Controls["Power Save Mode"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setSMART_POWER_MODE table.
  if ctl.String == "RGB Off & Video Off" then
    table.insert(SetCommands.setPOWER_SAVE_MODE, 0x00)
  elseif ctl.String == "RBG Off, Video On" then
    table.insert(SetCommands.setPOWER_SAVE_MODE, 0x01)
  elseif ctl.String == "RBG On, Video Off" then
    table.insert(SetCommands.setPOWER_SAVE_MODE, 0x02)
  elseif ctl.String == "RGB On & Video On" then
    table.insert(SetCommands.setPOWER_SAVE_MODE, 0x03)
  elseif ctl.String == "Mode 1" then
    table.insert(SetCommands.setPOWER_SAVE_MODE, 0x04)
  elseif ctl.String == "Mode 2" then
    table.insert(SetCommands.setPOWER_SAVE_MODE, 0x05)
  elseif ctl.String == "Mode 3" then
    table.insert(SetCommands.setPOWER_SAVE_MODE, 0x06)
  elseif ctl.String == "Mode 4" then
    table.insert(SetCommands.setPOWER_SAVE_MODE, 0x07)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setPOWER_SAVE_MODE)
  table.remove(SetCommands.setPOWER_SAVE_MODE, 2) 
end

-- Controls["Power Save Mode"].Choices = {'--- Select ---', 'RGB Off & Video Off', 'RBG Off, Video On', 'RBG On, Video Off', 'RGB On & Video On', 'Mode 1', 'Mode 2', 'Mode 3', 'Mode 4'}
-- setSMART_POWER_MODE_OFF = "\x06\x01\x00\xDD\x00\xDA",
-- setSMART_POWER_MODE_LOW = "\x06\x01\x00\xDD\x01\xDB",
-- setSMART_POWER_MODE_MEDIUM = "\x06\x01\x00\xDD\x02\xD8",
-- setSMART_POWER_MODE_HIGH = "\x06\x01\x00\xDD\x03\xD9",
Controls["Smart Power Mode"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setSMART_POWER_MODE table.
  if ctl.String == "Off" then
    table.insert(SetCommands.setSMART_POWER_MODE, 0x00)
  elseif ctl.String == "Low" then
    table.insert(SetCommands.setSMART_POWER_MODE, 0x01)
  elseif ctl.String == "Medium" then
    table.insert(SetCommands.setSMART_POWER_MODE, 0x02)
  elseif ctl.String == "High" then
    table.insert(SetCommands.setSMART_POWER_MODE, 0x03)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setSMART_POWER_MODE)
  table.remove(SetCommands.setSMART_POWER_MODE, 2) 
end


-- Controls["Advanced Power Management"].Choices = {'--- Select ---', 'Off', 'On', 'Mode 1 (TCP Off / WOL On)', 'Mode 2 (TCP On / WOL Off)'}-- setSMART_POWER_MODE_OFF = "\x06\x01\x00\xDD\x00\xDA",
-- setADVANCED_POWER_MANAGEMENT_OFF = "\x06\x01\x00\xD0\x00\xD7",
-- setADVANCED_POWER_MANAGEMENT_ON = "\x06\x01\x00\xD0\x01\xD6",
-- setADVANCED_POWER_MANAGEMENT_MODE1 = "\x06\x01\x00\xD0\x02\xD5",
-- setADVANCED_POWER_MANAGEMENT_MODE2 = "\x06\x01\x00\xD0\x03\xD4",
Controls["Advanced Power Management"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setECO_MODE table.
  if ctl.String == "Off" then
    table.insert(SetCommands.setADVANCED_POWER_MANAGEMENT, 0x00)
  elseif ctl.String == "On" then
    table.insert(SetCommands.setADVANCED_POWER_MANAGEMENT, 0x01)
  elseif ctl.String == "Mode 1 (TCP Off / WOL On)" then
    table.insert(SetCommands.setADVANCED_POWER_MANAGEMENT, 0x02)
  elseif ctl.String == "Mode 2 (TCP On / WOL Off)" then
    table.insert(SetCommands.setADVANCED_POWER_MANAGEMENT, 0x03)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setADVANCED_POWER_MANAGEMENT)
  table.remove(SetCommands.setADVANCED_POWER_MANAGEMENT, 2)  
end

-- Controls["Eco Mode"].Choices = {'--- Select ---', 'Off', 'On'}
-- setECO_MODE_OFF = "\x06\x01\x00\x64\x00\x63", -- SICP v2.00 onwards. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q
-- setECO_MODE_ON = "\x06\x01\x00\x64\x01\x62", -- SICP v2.00 onwards. NACK - Not Acknowledged: Checksum/Format error on xxBDL3511Q
Controls["Eco Mode"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setECO_MODE table.
  if ctl.String == "Off" then
    table.insert(SetCommands.setECO_MODE, 0x00)
  elseif ctl.String == "On" then
    table.insert(SetCommands.setECO_MODE, 0x01)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setECO_MODE)
  table.remove(SetCommands.setECO_MODE, 2)  
end

-- Monitor Restart
-- 0x00 = Android
-- 0x01 = Scalar / Scaler
Controls["Restart Android"].EventHandler = function(ctl)
  -- Insert the Data[1] byte into the setMONITOR_RESTART table.
  table.insert(SetCommands.setMONITOR_RESTART, 0x00)
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setMONITOR_RESTART)
  table.remove(SetCommands.setMONITOR_RESTART, 2)
end
Controls["Restart Scalar"].EventHandler = function(ctl)
  -- Insert the Data[1] byte into the setMONITOR_RESTART table.
  table.insert(SetCommands.setMONITOR_RESTART, 0x01)
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setMONITOR_RESTART)
  table.remove(SetCommands.setMONITOR_RESTART, 2)
end

-- Backlight
-- 0x00 = On
-- 0x01 = Off
Controls["Backlight"].EventHandler = function(ctl)
  -- Insert the Data[1] byte into the setBACKLIGHT table.
  if ctl.Boolean == true then
    table.insert(SetCommands.setBACKLIGHT, 0x00)
  elseif ctl.Boolean == false then
    table.insert(SetCommands.setBACKLIGHT, 0x01)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setBACKLIGHT)
  table.remove(SetCommands.setBACKLIGHT, 2)
end

-- Controls["OPS Power Setting"].Choices = {'--- Select ---', 'Always Off', 'Always On', 'Auto'}
-- setOPS_POWER_SETTING_OFF = "\x06\x01\x00\x6F\x00\x68", -- SICP v2.08 onwards
-- setOPS_POWER_SETTING_ON = "\x06\x01\x00\x6F\x01\x69", -- SICP v2.08 onwards
-- setOPS_POWER_SETTING_AUTO = "\x06\x01\x00\x6F\x02\x6A", -- SICP v2.08 onwards
Controls["OPS Power Setting"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setOPS_POWER_SETTING table.
  if ctl.String == "Always Off" then
    table.insert(SetCommands.setOPS_POWER_SETTING, 0x00)
  elseif ctl.String == "Always On" then
    table.insert(SetCommands.setOPS_POWER_SETTING, 0x01)
  elseif ctl.String == "Auto" then
    table.insert(SetCommands.setOPS_POWER_SETTING, 0x02)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setOPS_POWER_SETTING)
  table.remove(SetCommands.setOPS_POWER_SETTING, 2)
end

-- setINPUT_SOURCE_VIDEO = "\x09\x01\x00\xAC\x01\x00\x01\x00\xA4",
-- setINPUT_SOURCE_SVIDEO = "\x09\x01\x00\xAC\x02\x00\x01\x00\xA7",
-- setINPUT_SOURCE_COMPONENT = "\x09\x01\x00\xAC\x03\x00\x01\x00\xA6",
-- setINPUT_SOURCE_CVI2 = "\x09\x01\x00\xAC\x04\x00\x01\x00\xA1",
-- setINPUT_SOURCE_VGA = "\x09\x01\x00\xAC\x05\x00\x01\x00\xA0",
-- setINPUT_SOURCE_HDMI2 = "\x09\x01\x00\xAC\x06\x00\x01\x00\xA3",
-- setINPUT_SOURCE_DISPLAYPORT2 = "\x09\x01\x00\xAC\x07\x00\x01\x00\xA2",
-- setINPUT_SOURCE_USB2 = "\x09\x01\x00\xAC\x08\x00\x01\x00\xAD",
-- setINPUT_SOURCE_CARDDVID = "\x09\x01\x00\xAC\x09\x00\x01\x00\xAC",
-- setINPUT_SOURCE_DISPLAYPORT1 = "\x09\x01\x00\xAC\x0A\x00\x01\x00\xAF",
-- setINPUT_SOURCE_CARDOPS = "\x09\x01\x00\xAC\x0B\x00\x01\x00\xAE",
-- setINPUT_SOURCE_USB1 = "\x09\x01\x00\xAC\x0C\x00\x01\x00\xA9",
-- setINPUT_SOURCE_HDMI1 = "\x09\x01\x00\xAC\x0D\x00\x01\x00\xA8",
-- setINPUT_SOURCE_DVID = "\x09\x01\x00\xAC\x0E\x00\x01\x00\xAB",
-- setINPUT_SOURCE_HDMI3 = "\x09\x01\x00\xAC\x0F\x00\x01\x00\xAA",
-- setINPUT_SOURCE_BROWSER_NOURL = "\x09\x01\x00\xAC\x10\x00\x01\x00\xB5",
--  setINPUT_SOURCE_BROWSER_URL1 = "\x09\x01\x00\xAC\x10\x01\x01\x00\xB4",
--  setINPUT_SOURCE_BROWSER_URL2 = "\x09\x01\x00\xAC\x10\x02\x01\x00\xB4",
--  setINPUT_SOURCE_BROWSER_URL3 = "\x09\x01\x00\xAC\x10\x03\x01\x00\xB6",
--  setINPUT_SOURCE_BROWSER_URL4 = "\x09\x01\x00\xAC\x10\x04\x01\x00\xB1",
--  setINPUT_SOURCE_BROWSER_URL5 = "\x09\x01\x00\xAC\x10\x05\x01\x00\xB0",
--  setINPUT_SOURCE_BROWSER_URL6 = "\x09\x01\x00\xAC\x10\x06\x01\x00\xB3",
--  setINPUT_SOURCE_BROWSER_URL7 = "\x09\x01\x00\xAC\x10\x07\x01\x00\xB2",
-- setINPUT_SOURCE_SMARTCMS = "\x09\x01\x00\xAC\x11\x00\x01\x00\xB4",
-- setINPUT_SOURCE_DMS = "\x09\x01\x00\xAC\x12\x00\x01\x00\xB7",
-- setINPUT_SOURCE_INTERNALSTORAGE = "\x09\x01\x00\xAC\x13\x00\x01\x00\xB6",
-- setINPUT_SOURCE_RESERVED1 = "\x09\x01\x00\xAC\x14\x00\x01\x00\xB1",
-- setINPUT_SOURCE_RESERVED2 = "\x09\x01\x00\xAC\x15\x00\x01\x00\xB0",
-- setINPUT_SOURCE_MEDIAPLAYER_NOPLAYLIST = "\x09\x01\x00\xAC\x16\x00\x01\x00\xB3",
-- setINPUT_SOURCE_PDFPLAYER_NOPLAYLIST = "\x09\x01\x00\xAC\x17\x00\x01\x00\xB2",
-- setINPUT_SOURCE_CUSTOM = "\x09\x01\x00\xAC\x18\x00\x01\x00\xBD",
-- setINPUT_SOURCE_HDMI4 = "\x09\x01\x00\xAC\x19\x00\x01\x00\xBC",
-- setINPUT_SOURCE_VGA2 = "\x09\x01\x00\xAC\x1A\x00\x01\x00\xBF",
-- setINPUT_SOURCE_VGA3 = "\x09\x01\x00\xAC\x1B\x00\x01\x00\xBE",
-- setINPUT_SOURCE_IWB = "\x09\x01\x00\xAC\x1C\x00\x01\x00\xB9",
-- setINPUT_SOURCE_CMND = "\x09\x01\x00\xAC\x1D\x00\x01\x00\xB8",
-- setINPUT_SOURCE_HOMELAUNCHER = "\x09\x01\x00\xAC\x1E\x00\x01\x00\xBB",
-- setINPUT_SOURCE_USBC1 = "\x09\x01\x00\xAC\x1F\x00\x01\x00\xBA",
-- setINPUT_SOURCE_KIOSK = "\x09\x01\x00\xAC\x20\x00\x01\x00\x85",
-- setINPUT_SOURCE_SMARTINFO = "\x09\x01\x00\xAC\x21\x00\x01\x00\x84",
-- setINPUT_SOURCE_TUNER = "\x09\x01\x00\xAC\x22\x00\x01\x00\x87",
-- setINPUT_SOURCE_GOOGLECAST = "\x09\x01\x00\xAC\x23\x00\x01\x00\x86",
-- setINPUT_SOURCE_INTERACT = "\x09\x01\x00\xAC\x24\x00\x01\x00\x81",
-- setINPUT_SOURCE_USBC2 = "\x09\x01\x00\xAC\x25\x00\x01\x00\x80",
Controls["Input Source"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte (source) and Data[2] byte (playlist/url) into the setINPUT_SOURCE table.
  if ctl.String == "VIDEO" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x01) -- input source
    table.insert(SetCommands.setINPUT_SOURCE, 0x00) -- playlist number/url
  elseif ctl.String == "VIDEO" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x01)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "S-VIDEO" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x02)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "COMPONENT" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x03)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "CVI 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x04)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "VGA" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x05)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "HDMI 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x06)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "DisplayPort 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x07)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "USB 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x08)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Card DVI-D" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x09)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Display Port 1" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x0A)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Card OPS" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x0B)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "USB 1" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x0C)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "HDMI" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x0D)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "DVI-D" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x0E)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "HDMI 3" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x0F)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "BROWSER" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x10)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "BROWSER - URL 1" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x10)
    table.insert(SetCommands.setINPUT_SOURCE, 0x01)
  elseif ctl.String == "BROWSER - URL 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x10)
    table.insert(SetCommands.setINPUT_SOURCE, 0x02)
  elseif ctl.String == "BROWSER - URL 3" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x10)
    table.insert(SetCommands.setINPUT_SOURCE, 0x03)
  elseif ctl.String == "BROWSER - URL 4" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x10)
    table.insert(SetCommands.setINPUT_SOURCE, 0x04)
  elseif ctl.String == "BROWSER - URL 5" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x10)
    table.insert(SetCommands.setINPUT_SOURCE, 0x05)
  elseif ctl.String == "BROWSER - URL 6" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x10)
    table.insert(SetCommands.setINPUT_SOURCE, 0x06)
  elseif ctl.String == "BROWSER - URL 7" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x10)
    table.insert(SetCommands.setINPUT_SOURCE, 0x07)
  elseif ctl.String == "BROWSER - USB Autoplay" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x10)
    table.insert(SetCommands.setINPUT_SOURCE, 0x08)
  elseif ctl.String == "SMART CMS" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x11)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "DMS (Digital Media Server)" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x12)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "INTERNAL STORAGE" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x13)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Reserved 1" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x14)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Reserved 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x15)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Media Player" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x16)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Media Player - Playlist 1" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x16)
    table.insert(SetCommands.setINPUT_SOURCE, 0x01)
  elseif ctl.String == "Media Player - Playlist 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x16)
    table.insert(SetCommands.setINPUT_SOURCE, 0x02)
  elseif ctl.String == "Media Player - Playlist 3" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x16)
    table.insert(SetCommands.setINPUT_SOURCE, 0x03)
  elseif ctl.String == "Media Player - Playlist 4" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x16)
    table.insert(SetCommands.setINPUT_SOURCE, 0x04)
  elseif ctl.String == "Media Player - Playlist 5" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x16)
    table.insert(SetCommands.setINPUT_SOURCE, 0x05)
  elseif ctl.String == "Media Player - Playlist 6" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x16)
    table.insert(SetCommands.setINPUT_SOURCE, 0x06)
  elseif ctl.String == "Media Player - Playlist 7" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x16)
    table.insert(SetCommands.setINPUT_SOURCE, 0x07)
  elseif ctl.String == "Media Player - USB Autoplay" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x16)
    table.insert(SetCommands.setINPUT_SOURCE, 0x08)
  elseif ctl.String == "PDF Player" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x17)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "PDF Player - Playlist 1" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x17)
    table.insert(SetCommands.setINPUT_SOURCE, 0x01)
  elseif ctl.String == "PDF Player - Playlist 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x17)
    table.insert(SetCommands.setINPUT_SOURCE, 0x02)
  elseif ctl.String == "PDF Player - Playlist 3" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x17)
    table.insert(SetCommands.setINPUT_SOURCE, 0x03)
  elseif ctl.String == "PDF Player - Playlist 4" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x17)
    table.insert(SetCommands.setINPUT_SOURCE, 0x04)
  elseif ctl.String == "PDF Player - Playlist 5" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x17)
    table.insert(SetCommands.setINPUT_SOURCE, 0x05)
  elseif ctl.String == "PDF Player - Playlist 6" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x17)
    table.insert(SetCommands.setINPUT_SOURCE, 0x06)
  elseif ctl.String == "PDF Player - Playlist 7" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x17)
    table.insert(SetCommands.setINPUT_SOURCE, 0x07)
  elseif ctl.String == "PDF Player - USB Autoplay" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x17)
    table.insert(SetCommands.setINPUT_SOURCE, 0x08)
  elseif ctl.String == "Custom" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x18)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "HDMI 4" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x19)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "VGA 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x1A)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "VGA 3" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x1B)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "IWB" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x1C)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "CMND & Play Web" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x1D)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Home/Launcher" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x1E)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "USB Type-C" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x1F)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Kiosk" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x20)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Smart Info" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x21)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Tuner" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x22)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Google Cast" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x23)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "Interact" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x24)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  elseif ctl.String == "USB Type-C 2" then
    table.insert(SetCommands.setINPUT_SOURCE, 0x25)
    table.insert(SetCommands.setINPUT_SOURCE, 0x00)
  end
  -- Insert the Data [3] byte (OSD style) and Data [4] byte (mute state) into the setINPUT_SOURCE table.
  table.insert(SetCommands.setINPUT_SOURCE, 0x01) -- OSD Source label displayed after switching = true
  table.insert(SetCommands.setINPUT_SOURCE, 0x00) -- Mute style (reserved)
  -- Send command, then remove the Data[1], Data[2], Data[3] and Data[4] bytes in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setINPUT_SOURCE)
  table.remove(SetCommands.setINPUT_SOURCE, 2)
  table.remove(SetCommands.setINPUT_SOURCE, 2)
  table.remove(SetCommands.setINPUT_SOURCE, 2)
  table.remove(SetCommands.setINPUT_SOURCE, 2)
end

-- setBOOT_SOURCE_LASTINPUT = "\x07\x01\x00\xBB\x00\x00\xBD", -- SICP v2.05 onwards
-- setBOOT_SOURCE_VIDEO = "\x07\x01\x00\xBB\x01\x00\xBC", -- SICP v2.05 onwards
-- setBOOT_SOURCE_SVIDEO = "\x07\x01\x00\xBB\x02\x00\xBF", -- SICP v2.05 onwards
-- setBOOT_SOURCE_COMPONENT = "\x07\x01\x00\xBB\x03\x00\xBE", -- SICP v2.05 onwards
-- setBOOT_SOURCE_CVI2 = "\x07\x01\x00\xBB\x04\x00\xB9", -- SICP v2.05 onwards
-- setBOOT_SOURCE_VGA = "\x07\x01\x00\xBB\x05\x00\xB8", -- SICP v2.05 onwards
-- setBOOT_SOURCE_HDMI2 = "\x07\x01\x00\xBB\x06\x00\xBB", -- SICP v2.05 onwards
-- setBOOT_SOURCE_DISPLAYPORT2 = "\x07\x01\x00\xBB\x07\x00\xBA", -- SICP v2.05 onwards
-- setBOOT_SOURCE_USB2 = "\x07\x01\x00\xBB\x08\x00\xB5", -- SICP v2.05 onwards
-- setBOOT_SOURCE_CARDDVID = "\x07\x01\x00\xBB\x09\x00\xB4", -- SICP v2.05 onwards
-- setBOOT_SOURCE_DISPLAYPORT1 = "\x07\x01\x00\xBB\x0A\x00\xB7", -- SICP v2.05 onwards
-- setBOOT_SOURCE_CARDOPS = "\x07\x01\x00\xBB\x0B\x00\xB6", -- SICP v2.05 onwards
-- setBOOT_SOURCE_USB1 = "\x07\x01\x00\xBB\x0C\x00\xB1", -- SICP v2.05 onwards
-- setBOOT_SOURCE_HDMI1 = "\x07\x01\x00\xBB\x0D\x00\xB0", -- SICP v2.05 onwards
-- setBOOT_SOURCE_DVID = "\x07\x01\x00\xBB\x0E\x00\xB3", -- SICP v2.05 onwards
-- setBOOT_SOURCE_HDMI3 = "\x07\x01\x00\xBB\x0F\x00\xB2", -- SICP v2.05 onwards
-- setBOOT_SOURCE_BROWSER_NOURL = "\x07\x01\x00\xBB\x10\x00\xAD", -- SICP v2.05 onwards
-- setBOOT_SOURCE_BROWSER_URL1 = "\x07\x01\x00\xBB\x10\x01\xAC", -- SICP v2.05 onwards
-- setBOOT_SOURCE_BROWSER_URL2 = "\x07\x01\x00\xBB\x10\x02\xAF", -- SICP v2.05 onwards
-- setBOOT_SOURCE_BROWSER_URL3 = "\x07\x01\x00\xBB\x10\x03\xAE", -- SICP v2.05 onwards
-- setBOOT_SOURCE_BROWSER_URL4 = "\x07\x01\x00\xBB\x10\x04\xA9", -- SICP v2.05 onwards
-- setBOOT_SOURCE_BROWSER_URL5 = "\x07\x01\x00\xBB\x10\x05\xA8", -- SICP v2.05 onwards
-- setBOOT_SOURCE_BROWSER_URL6 = "\x07\x01\x00\xBB\x10\x06\xAB", -- SICP v2.05 onwards
-- setBOOT_SOURCE_BROWSER_URL7 = "\x07\x01\x00\xBB\x10\x07\xAA", -- SICP v2.05 onwards
-- setBOOT_SOURCE_BROWSER_USBAUTOPLAY = "\x07\x01\x00\xBB\x10\x08\xA5", -- SICP v2.05 onwards
-- setBOOT_SOURCE_SMARTCMS = "\x07\x01\x00\xBB\x11\x00\xAC", -- SICP v2.05 onwards
-- setBOOT_SOURCE_DMS = "\x07\x01\x00\xBB\x12\x00\xAF", -- SICP v2.05 onwards
-- setBOOT_SOURCE_INTERNALSTORAGE = "\x07\x01\x00\xBB\x13\x00\xAE", -- SICP v2.05 onwards
-- setBOOT_SOURCE_RESERVED1 = "\x07\x01\x00\xBB\x14\x00\xA9", -- SICP v2.05 onwards
-- setBOOT_SOURCE_RESERVED2 = "\x07\x01\x00\xBB\x15\x00\xA8", -- SICP v2.05 onwards
-- setBOOT_SOURCE_MEDIAPLAYER_NOPLAYLIST = "\x07\x01\x00\xBB\x16\x00\xAB", -- SICP v2.05 onwards
-- setBOOT_SOURCE_MEDIAPLAYER_PLAYLIST1 = "\x07\x01\x00\xBB\x16\x01\xAA", -- SICP v2.05 onwards
-- setBOOT_SOURCE_MEDIAPLAYER_PLAYLIST2 = "\x07\x01\x00\xBB\x16\x02\xA9", -- SICP v2.05 onwards
-- setBOOT_SOURCE_MEDIAPLAYER_PLAYLIST3 = "\x07\x01\x00\xBB\x16\x03\xA8", -- SICP v2.05 onwards
-- setBOOT_SOURCE_MEDIAPLAYER_PLAYLIST4 = "\x07\x01\x00\xBB\x16\x04\xAF", -- SICP v2.05 onwards
-- setBOOT_SOURCE_MEDIAPLAYER_PLAYLIST5 = "\x07\x01\x00\xBB\x16\x05\xAE", -- SICP v2.05 onwards
-- setBOOT_SOURCE_MEDIAPLAYER_PLAYLIST6 = "\x07\x01\x00\xBB\x16\x06\xAD", -- SICP v2.05 onwards
-- setBOOT_SOURCE_MEDIAPLAYER_PLAYLIST7 = "\x07\x01\x00\xBB\x16\x07\xAC", -- SICP v2.05 onwards
-- setBOOT_SOURCE_MEDIAPLAYER_USBAUTOPLAY = "\x07\x01\x00\xBB\x16\x08\xA3", -- SICP v2.05 onwards
-- setBOOT_SOURCE_PDFPLAYER_NOPLAYLIST = "\x07\x01\x00\xBB\x17\x00\xAA", -- SICP v2.05 onwards
-- setBOOT_SOURCE_PDFPLAYER_PLAYLIST1 = "\x07\x01\x00\xBB\x17\x01\xAB", -- SICP v2.05 onwards
-- setBOOT_SOURCE_PDFPLAYER_PLAYLIST2 = "\x07\x01\x00\xBB\x17\x02\xA8", -- SICP v2.05 onwards
-- setBOOT_SOURCE_PDFPLAYER_PLAYLIST3 = "\x07\x01\x00\xBB\x17\x03\xA9", -- SICP v2.05 onwards
-- setBOOT_SOURCE_PDFPLAYER_PLAYLIST4 = "\x07\x01\x00\xBB\x17\x04\xAE", -- SICP v2.05 onwards
-- setBOOT_SOURCE_PDFPLAYER_PLAYLIST5 = "\x07\x01\x00\xBB\x17\x05\xAF", -- SICP v2.05 onwards
-- setBOOT_SOURCE_PDFPLAYER_PLAYLIST6 = "\x07\x01\x00\xBB\x17\x06\xAC", -- SICP v2.05 onwards
-- setBOOT_SOURCE_PDFPLAYER_PLAYLIST7 = "\x07\x01\x00\xBB\x17\x07\xAD", -- SICP v2.05 onwards
-- setBOOT_SOURCE_PDFPLAYER_USBAUTOPLAY = "\x07\x01\x00\xBB\x17\x08\xA2", -- SICP v2.05 onwards
-- setBOOT_SOURCE_CUSTOM = "\x07\x01\x00\xBB\x18\x00\xA5", -- SICP v2.05 onwards
-- setBOOT_SOURCE_HDMI4 = "\x07\x01\x00\xBB\x19\x00\xA4", -- SICP v2.05 onwards
-- setBOOT_SOURCE_VGA2 = "\x07\x01\x00\xBB\x1A\x00\xA7", -- SICP v2.05 onwards
-- setBOOT_SOURCE_VGA3 = "\x07\x01\x00\xBB\x1B\x00\xA6", -- SICP v2.05 onwards
-- setBOOT_SOURCE_IWB = "\x07\x01\x00\xBB\x1C\x00\xA1", -- SICP v2.05 onwards
-- setBOOT_SOURCE_CMND = "\x07\x01\x00\xBB\x1D\x00\xA0", -- SICP v2.05 onwards
-- setBOOT_SOURCE_HOMELAUNCHER = "\x07\x01\x00\xBB\x1E\x00\xA3", -- SICP v2.05 onwards
-- setBOOT_SOURCE_USBC1 = "\x07\x01\x00\xBB\x1F\x00\xA2", -- SICP v2.05 onwards
-- setBOOT_SOURCE_KIOSK = "\x07\x01\x00\xBB\x20\x00\x9D", -- SICP v2.05 onwards
-- setBOOT_SOURCE_SMARTINFO = "\x07\x01\x00\xBB\x21\x00\x9C", -- SICP v2.05 onwards
-- setBOOT_SOURCE_TUNER = "\x07\x01\x00\xBB\x22\x00\x9F", -- SICP v2.05 onwards
-- setBOOT_SOURCE_GOOGLECAST = "\x07\x01\x00\xBB\x23\x00\x9E", -- SICP v2.05 onwards
-- setBOOT_SOURCE_INTERACT = "\x07\x01\x00\xBB\x24\x00\x99", -- SICP v2.05 onwards
-- setBOOT_SOURCE_USBC2 = "\x07\x01\x00\xBB\x25\x00\x98", -- SICP v2.05 onwards
Controls["Boot On Source"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- -- Insert the Data[1] byte (source) and Data[2] byte (playlist/url) into the setBOOT_SOURCE table.
  if ctl.String == "Last Input" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "VIDEO" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x01)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "S-VIDEO" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x02)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "COMPONENT" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x03)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "CVI 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x04)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "VGA" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x05)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "HDMI 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x06)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "DisplayPort 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x07)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "USB 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x08)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Card DVI-D" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x09)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Display Port 1" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x0A)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Card OPS" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x0B)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "USB 1" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x0C)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "HDMI" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x0D)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "DVI-D" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x0E)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "HDMI 3" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x0F)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "BROWSER" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x10)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "BROWSER - URL 1" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x10)
    table.insert(SetCommands.setBOOT_SOURCE, 0x01)
  elseif ctl.String == "BROWSER - URL 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x10)
    table.insert(SetCommands.setBOOT_SOURCE, 0x02)
  elseif ctl.String == "BROWSER - URL 3" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x10)
    table.insert(SetCommands.setBOOT_SOURCE, 0x03)
  elseif ctl.String == "BROWSER - URL 4" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x10)
    table.insert(SetCommands.setBOOT_SOURCE, 0x04)
  elseif ctl.String == "BROWSER - URL 5" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x10)
    table.insert(SetCommands.setBOOT_SOURCE, 0x05)
  elseif ctl.String == "BROWSER - URL 6" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x10)
    table.insert(SetCommands.setBOOT_SOURCE, 0x06)
  elseif ctl.String == "BROWSER - URL 7" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x10)
    table.insert(SetCommands.setBOOT_SOURCE, 0x07)
  elseif ctl.String == "BROWSER - USB Autoplay" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x10)
    table.insert(SetCommands.setBOOT_SOURCE, 0x08)
  elseif ctl.String == "SMART CMS" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x11)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "DMS (Digital Media Server)" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x12)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "INTERNAL STORAGE" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x13)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Reserved 1" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x14)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Reserved 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x15)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Media Player" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x16)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Media Player - Playlist 1" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x16)
    table.insert(SetCommands.setBOOT_SOURCE, 0x01)
  elseif ctl.String == "Media Player - Playlist 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x16)
    table.insert(SetCommands.setBOOT_SOURCE, 0x02)
  elseif ctl.String == "Media Player - Playlist 3" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x16)
    table.insert(SetCommands.setBOOT_SOURCE, 0x03)
  elseif ctl.String == "Media Player - Playlist 4" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x16)
    table.insert(SetCommands.setBOOT_SOURCE, 0x04)
  elseif ctl.String == "Media Player - Playlist 5" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x16)
    table.insert(SetCommands.setBOOT_SOURCE, 0x05)
  elseif ctl.String == "Media Player - Playlist 6" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x16)
    table.insert(SetCommands.setBOOT_SOURCE, 0x06)
  elseif ctl.String == "Media Player - Playlist 7" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x16)
    table.insert(SetCommands.setBOOT_SOURCE, 0x07)
  elseif ctl.String == "Media Player - USB Autoplay" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x16)
    table.insert(SetCommands.setBOOT_SOURCE, 0x08)
  elseif ctl.String == "PDF Player" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x17)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "PDF Player - Playlist 1" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x17)
    table.insert(SetCommands.setBOOT_SOURCE, 0x01)
  elseif ctl.String == "PDF Player - Playlist 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x17)
    table.insert(SetCommands.setBOOT_SOURCE, 0x02)
  elseif ctl.String == "PDF Player - Playlist 3" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x17)
    table.insert(SetCommands.setBOOT_SOURCE, 0x03)
  elseif ctl.String == "PDF Player - Playlist 4" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x17)
    table.insert(SetCommands.setBOOT_SOURCE, 0x04)
  elseif ctl.String == "PDF Player - Playlist 5" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x17)
    table.insert(SetCommands.setBOOT_SOURCE, 0x05)
  elseif ctl.String == "PDF Player - Playlist 6" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x17)
    table.insert(SetCommands.setBOOT_SOURCE, 0x06)
  elseif ctl.String == "PDF Player - Playlist 7" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x17)
    table.insert(SetCommands.setBOOT_SOURCE, 0x07)
  elseif ctl.String == "PDF Player - USB Autoplay" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x17)
    table.insert(SetCommands.setBOOT_SOURCE, 0x08)
  elseif ctl.String == "Custom" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x18)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "HDMI 4" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x19)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "VGA 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x1A)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "VGA 3" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x1B)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "IWB" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x1C)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "CMND & Play Web" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x1D)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Home/Launcher" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x1E)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "USB Type-C" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x1F)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Kiosk" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x20)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Smart Info" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x21)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Tuner" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x22)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Google Cast" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x23)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "Interact" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x24)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  elseif ctl.String == "USB Type-C 2" then
    table.insert(SetCommands.setBOOT_SOURCE, 0x25)
    table.insert(SetCommands.setBOOT_SOURCE, 0x00)
  end
  -- Send command, then remove the Data[1] and Data[2] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setBOOT_SOURCE)
  table.remove(SetCommands.setBOOT_SOURCE, 2)
  table.remove(SetCommands.setBOOT_SOURCE, 2)
end

-- Controls["Signal Auto Detection"].Choices = {'--- Select ---', 'Off', 'All', 'Reserved', 'PC Sources Only', 'Video Sources Only', 'Failover'}
-- setSIGNAL_AUTO_DETECTION_OFF = "\x06\x01\x00\xAE\x00\xA9",
-- setSIGNAL_AUTO_DETECTION_ALL = "\x06\x01\x00\xAE\x01\xA8",
-- setSIGNAL_AUTO_DETECTION_RESERVED = "\x06\x01\x00\xAE\x02\xAB", -- NAV - Not Available on xxBDL3511Q
-- setSIGNAL_AUTO_DETECTION_PC = "\x06\x01\x00\xAE\x03\xAA", -- NAV - Not Available on xxBDL3511Q
-- setSIGNAL_AUTO_DETECTION_VIDEO = "\x06\x01\x00\xAE\x04\xAD", -- NAV - Not Available on xxBDL3511Q
-- setSIGNAL_AUTO_DETECTION_FAILOVER = "\x06\x01\x00\xAE\x05\xAC",
Controls["Signal Auto Detection"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setSIGNAL_AUTO_DETECTION table.
  if ctl.String == "Off" then
    table.insert(SetCommands.setSIGNAL_AUTO_DETECTION, 0x00)
  elseif ctl.String == "All" then
    table.insert(SetCommands.setSIGNAL_AUTO_DETECTION, 0x01)
  elseif ctl.String == "Reserved" then
    table.insert(SetCommands.setSIGNAL_AUTO_DETECTION, 0x02)
  elseif ctl.String == "PC Sources Only" then
    table.insert(SetCommands.setSIGNAL_AUTO_DETECTION, 0x03)
  elseif ctl.String == "Video Sources Only" then
    table.insert(SetCommands.setSIGNAL_AUTO_DETECTION, 0x04)
  elseif ctl.String == "Failover" then
    table.insert(SetCommands.setSIGNAL_AUTO_DETECTION, 0x05)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setSIGNAL_AUTO_DETECTION)
  table.remove(SetCommands.setSIGNAL_AUTO_DETECTION, 2)
end

-- Volume (Speaker and Audio/Line Out)
for i, ctl in ipairs({Controls["Speaker Volume"], Controls["Audio Out Volume"]}) do
  ctl.EventHandler = function()
    -- Insert the Data[1] byte into the setVOLUME table.
    table.insert(SetCommands.setVOLUME, string.format("0x%02X", math.floor(Controls["Speaker Volume"].Value)))
    table.insert(SetCommands.setVOLUME, string.format("0x%02X", math.floor(Controls["Audio Out Volume"].Value)))
    -- Send command, then remove the Data[1] and Data[2] byte in preparation for next time the command is generated and sent.
    SendCommand(SetCommands.setVOLUME)
    table.remove(SetCommands.setVOLUME, 2) -- remove the Speaker Volume value from the table after sending.
    table.remove(SetCommands.setVOLUME, 2) -- remove the Audio Out Volume value from the table after sending.
  end
end

-- Volume Step (Speaker and Audio/Line Out)
-- DATA[1] Speaker Out
-- DATA[2] Audio Out.
-- 0x00 = Vol Down
-- 0x01 = Vol Up
-- 0x02 = No Change*
for i, ctl in ipairs(Controls["Speaker Volume (Up / Down)"]) do
  ctl.EventHandler = function()
    if i == 1 then
      -- Insert the Data[1] and Data[2] byte into the setVOLUME_STEP table.
      table.insert(SetCommands.setVOLUME_STEP, 0x01)
      table.insert(SetCommands.setVOLUME_STEP, 0x02)
    elseif i == 2 then
      -- Insert the Data[1] and Data[2] byte into the setVOLUME_STEP table.
      table.insert(SetCommands.setVOLUME_STEP, 0x00)
      table.insert(SetCommands.setVOLUME_STEP, 0x02)
    end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setVOLUME_STEP)
  table.remove(SetCommands.setVOLUME_STEP, 2)
  table.remove(SetCommands.setVOLUME_STEP, 2)
  end
end

for i, ctl in ipairs(Controls["Audio Out Volume (Up / Down)"]) do
  ctl.EventHandler = function()
    if i == 1 then
      -- Insert the Data[1] and Data[2] byte into the setVOLUME_STEP table.
      table.insert(SetCommands.setVOLUME_STEP, 0x02)
      table.insert(SetCommands.setVOLUME_STEP, 0x01)
    elseif i == 2 then
      -- Insert the Data[1] and Data[2] byte into the setVOLUME_STEP table.
      table.insert(SetCommands.setVOLUME_STEP, 0x02)
      table.insert(SetCommands.setVOLUME_STEP, 0x00)
    end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setVOLUME_STEP)
  table.remove(SetCommands.setVOLUME_STEP, 2)
  table.remove(SetCommands.setVOLUME_STEP, 2)
  end
end

-- Mute
-- setMUTE_OFF = "\x06\x01\x00\x47\x00\x40",
-- setMUTE_ON = "\x06\x01\x00\x47\x01\x41",
Controls["Mute"].EventHandler = function(ctl)
  -- Insert the Data[1] byte into the setMUTE table.
  if ctl.Boolean then
    table.insert(SetCommands.setMUTE, 0x01)
  else
    table.insert(SetCommands.setMUTE, 0x00)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setMUTE)
  table.remove(SetCommands.setMUTE, 2) 
end

-- Speakers (On/Off)
-- setSPEAKERS_OFF = "\x06\x01\x00\x8E\x00\x89",
-- setSPEAKERS_ON = "\x06\x01\x00\x8E\x01\x88",
Controls["Speakers"].EventHandler = function(ctl)
  -- Insert the Data[1] byte into the setSPEAKERS table.
  if ctl.Boolean then
    table.insert(SetCommands.setSPEAKERS, 0x01)
  else
    table.insert(SetCommands.setSPEAKERS, 0x00)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setSPEAKERS)
  table.remove(SetCommands.setSPEAKERS, 2) 
end

-- Remote Control Lock
-- setREMOTELOCK_UNLOCKALL = "\x06\x01\x00\x1C\x01\x1A",
-- setREMOTELOCK_LOCKALL = "\x06\x01\x00\x1C\x02\x19",
-- setREMOTELOCK_LOCKALL_BUTPOWER = "\x06\x01\x00\x1C\x03\x18",
-- setREMOTELOCK_LOCKALL_BUTVOLUME = "\x06\x01\x00\x1C\x04\x1F",
-- setREMOTELOCK__PRIMARY = "\x06\x01\x00\x1C\x05\x1E",
-- setREMOTELOCK__SECONDARY = "\x06\x01\x00\x1C\x06\x1D",
-- setREMOTELOCK_LOCKALL_BUTP&V = "\x06\x01\x00\x1C\x07\x1C",
Controls["Remote Control Lock"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setREMOTELOCK table.
  if ctl.String == "Unlock All" then
    table.insert(SetCommands.setREMOTELOCK, 0x01)
  elseif ctl.String == "Lock All" then
    table.insert(SetCommands.setREMOTELOCK, 0x02)
  elseif ctl.String == "Lock All Except Power" then
    table.insert(SetCommands.setREMOTELOCK, 0x03)
  elseif ctl.String == "Lock All Except Volume" then
    table.insert(SetCommands.setREMOTELOCK, 0x04)
  elseif ctl.String == "Primary (Master)" then
    table.insert(SetCommands.setREMOTELOCK, 0x05)
  elseif ctl.String == "Secondary (Daisy Chain)" then
    table.insert(SetCommands.setREMOTELOCK, 0x06)
  elseif ctl.String == "Lock All Except Power & Volume" then
    table.insert(SetCommands.setREMOTELOCK, 0x07)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setREMOTELOCK)
  table.remove(SetCommands.setREMOTELOCK, 2)
end

-- Keypad Lock
-- setKEYPADLOCK_UNLOCKALL = "\x06\x01\x00\x1A\x01\x1C",
-- setKEYPADLOCK_LOCKALL = "\x06\x01\x00\x1A\x02\x1F",
-- setKEYPADLOCK_LOCKALL_BUTPOWER = "\x06\x01\x00\x1A\x03\x1E",
-- setKEYPADLOCK_LOCKALL_BUTVOLUME = "\x06\x01\x00\x1A\x04\x19",
-- setKEYPADLOCK_LOCKALL_BUTP&V = "\x06\x01\x00\x1A\x07\x1A",
Controls["Keypad Lock"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setKEYPADLOCK table.
  if ctl.String == "Unlock All" then
    table.insert(SetCommands.setKEYPADLOCK, 0x01)
  elseif ctl.String == "Lock All" then
    table.insert(SetCommands.setKEYPADLOCK, 0x02)
  elseif ctl.String == "Lock All Except Power" then
    table.insert(SetCommands.setKEYPADLOCK, 0x03)
  elseif ctl.String == "Lock All Except Volume" then
    table.insert(SetCommands.setKEYPADLOCK, 0x04)
  elseif ctl.String == "Lock All Except Power & Volume" then
    table.insert(SetCommands.setKEYPADLOCK, 0x07)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setKEYPADLOCK)
  table.remove(SetCommands.setKEYPADLOCK, 2)
end

-- Video Parameters
for i, ctl in ipairs({Controls["Brightness"], Controls["Colour"], Controls["Contrast"], Controls["Sharpness"], Controls["Tint (Hue)"], Controls["Black Level"], Controls["Gamma"]}) do
  ctl.EventHandler = function()
  
    -- If Gamma "--- Select ---" is selected, do nothing.
    if Controls["Gamma"].String == "--- Select ---" then return end

    -- Insert the Data[1], Data[2], Data[3], Data[4], Data[5] and Data[6] byte into the setVIDEO_PARAMETERS table.
    table.insert(SetCommands.setVIDEO_PARAMETERS, string.format("0x%02X", math.floor(Controls["Brightness"].Value)))
    table.insert(SetCommands.setVIDEO_PARAMETERS, string.format("0x%02X", math.floor(Controls["Colour"].Value)))
    table.insert(SetCommands.setVIDEO_PARAMETERS, string.format("0x%02X", math.floor(Controls["Contrast"].Value)))
    table.insert(SetCommands.setVIDEO_PARAMETERS, string.format("0x%02X", math.floor(Controls["Sharpness"].Value)))
    table.insert(SetCommands.setVIDEO_PARAMETERS, string.format("0x%02X", math.floor(Controls["Tint (Hue)"].Value)))
    table.insert(SetCommands.setVIDEO_PARAMETERS, string.format("0x%02X", math.floor(Controls["Black Level"].Value)))

    -- Insert the Data[7] byte into the setVIDEO_PARAMETERS table.
    if Controls["Gamma"].String == "Native" then
      table.insert(SetCommands.setVIDEO_PARAMETERS, 0x01)
    elseif Controls["Gamma"].String == "S Gamma" then
      table.insert(SetCommands.setVIDEO_PARAMETERS, 0x02)
    elseif Controls["Gamma"].String == "2.2" then
      table.insert(SetCommands.setVIDEO_PARAMETERS, 0x03)
    elseif Controls["Gamma"].String == "2.4" then
      table.insert(SetCommands.setVIDEO_PARAMETERS, 0x04)
    elseif Controls["Gamma"].String == "D-Image (DICOM Gamma)" then
      table.insert(SetCommands.setVIDEO_PARAMETERS, 0x05)
    end

    -- Send command, then remove the Data[1], Data[2], Data[3], Data[4], Data[5], Data[6], and Data[7] byte in preparation for next time the command is generated and sent.
    SendCommand(SetCommands.setVIDEO_PARAMETERS)
    table.remove(SetCommands.setVIDEO_PARAMETERS, 2) -- remove the Brightness value from the table after sending.
    table.remove(SetCommands.setVIDEO_PARAMETERS, 2) -- remove the Colour value from the table after sending.
    table.remove(SetCommands.setVIDEO_PARAMETERS, 2) -- remove the Contrast value from the table after sending.
    table.remove(SetCommands.setVIDEO_PARAMETERS, 2) -- remove the Sharpness value from the table after sending.
    table.remove(SetCommands.setVIDEO_PARAMETERS, 2) -- remove the Tint (Hue) value from the table after sending.
    table.remove(SetCommands.setVIDEO_PARAMETERS, 2) -- remove the Black Level value from the table after sending.
    table.remove(SetCommands.setVIDEO_PARAMETERS, 2) -- remove the Gamma value from the table after sending.
  end
end

-- Picture Format
-- setPICTURE_FORMAT_NORMAL = "\x06\x01\x00\x3A\x00\x3D",
-- setPICTURE_FORMAT_CUSTOM = "\x06\x01\x00\x3A\x01\x3C",
-- setPICTURE_FORMAT_REAL = "\x06\x01\x00\x3A\x02\x3F",
-- setPICTURE_FORMAT_FULL = "\x06\x01\x00\x3A\x03\x3E",
-- setPICTURE_FORMAT_219 = "\x06\x01\x00\x3A\x04\x39", -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.
-- setPICTURE_FORMAT_DYNAMIC = "\x06\x01\x00\x3A\x05\x38", -- NAV - Not Available: Command is valid but not supported in the current SICP implementation.
-- setPICTURE_FORMAT_169 = "\x06\x01\x00\x3A\x06\x3B",
Controls["Picture Format"].EventHandler = function(ctl)
  -- If "--- Select ---" is selected, do nothing.
  if ctl.String == "--- Select ---" then return end

  -- Insert the Data[1] byte into the setKEYPADLOCK table.
  if ctl.String == "Normal (4:3)" then
    table.insert(SetCommands.setPICTURE_FORMAT, 0x00)
  elseif ctl.String == "Custom" then
    table.insert(SetCommands.setPICTURE_FORMAT, 0x01)
  elseif ctl.String == "Real (1:1)" then
    table.insert(SetCommands.setPICTURE_FORMAT, 0x02)
  elseif ctl.String == "Full" then
    table.insert(SetCommands.setPICTURE_FORMAT, 0x03)
  elseif ctl.String == "21:9" then
    table.insert(SetCommands.setPICTURE_FORMAT, 0x04)
  elseif ctl.String == "Dynamic" then
    table.insert(SetCommands.setPICTURE_FORMAT, 0x05)
  elseif ctl.String == "16:9" then
    table.insert(SetCommands.setPICTURE_FORMAT, 0x06)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setPICTURE_FORMAT)
  table.remove(SetCommands.setPICTURE_FORMAT, 2)
end

-- Freeze Image
-- setFREEZEIMAGE_OFF = "\x06\x01\x00\x77\x00\x70",
-- setFREEZEIMAGE_ON = "\x06\x01\x00\x77\x01\x71",
Controls["Freeze Image"].EventHandler = function(ctl)
  -- Insert the Data[1] byte into the setFREEZEIMAGE table.
  if ctl.Boolean then
    table.insert(SetCommands.setFREEZEIMAGE, 0x01)
  else
    table.insert(SetCommands.setFREEZEIMAGE, 0x00)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setFREEZEIMAGE)
  table.remove(SetCommands.setFREEZEIMAGE, 2) 
end

-- External Storage Lock (MicroSD/USB Lock)
-- setSTORAGELOCK_OFF = "\x06\x01\x00\xF1\x00\xF6",
-- setSTORAGELOCK_ON = "\x06\x01\x00\xF1\x01\xF7",
Controls["External Storage Lock"].EventHandler = function(ctl)
  -- Insert the Data[1] byte into the setSTORAGELOCK table.
  if ctl.Boolean then
    table.insert(SetCommands.setSTORAGELOCK, 0x01)
  else
    table.insert(SetCommands.setSTORAGELOCK, 0x00)
  end
  -- Send command, then remove the Data[1] byte in preparation for next time the command is generated and sent.
  SendCommand(SetCommands.setSTORAGELOCK)
  table.remove(SetCommands.setSTORAGELOCK, 2) 
end

-- Send Screenshot
Controls["Send Screenshot"].EventHandler = function(ctl)
  SendCommand(SetCommands.setSEND_SCREENSHOT)
end


-------------------------------------------------------------

-- Functions

function SendCommand(sCmd)
  
  -- Create the variable sLastCommandSent. Some GetCommands contain 2 hexidecimal values.
  -- When checking the response data under socket.Data = function(), some commands will need to string.find 2 hexidemical values. (eg. getSICP_VERSION)
  sLastCommandSent = ""
  for i = 1, #sCmd do
    sLastCommandSent = sLastCommandSent .. string.format("0x%02X", sCmd[i])
    if i < #sCmd then
      sLastCommandSent = sLastCommandSent .. ", "
    end
  end

  -- Stop Polling. PollTimer will be restarted after response received in socket.Data = function()
  PollTimer:Stop()


  if socket.IsConnected == true and ResponseWait == false then
    
    -- Generate packet
    local packet = GeneratePacket(sCmd)

    -- Set ResponseWait to true. This will prevent Poll commands being sent if still waiting on a reply to a set Command.
    ResponseWait = true

    -- Print the SICP Data[0] and Data[1] bytes to console.
    if tonumber(#sCmd) == 1 then
      print("SICP DATA[0] Byte sent: ".. sLastCommandSent)
    elseif tonumber(#sCmd) > 1 then 
      print("SICP DATA[0] and DATA[1-"..#sCmd.."] Bytes sent: ".. sLastCommandSent)
    end

    -- Send packet
    socket:Write(packet)

  elseif socket.IsConnected == true and ResponseWait == true then
    print("Unable to send command as ResponseWait == true. Inserting command into QueudedCommands tables, setting ResponseWait to false, and running ResendCommand() : Trying again!!")
    
    -- inserting the failed command into QueuedCommands table, setting ResponseWait to false, then running ResendCommand().
    table.insert(QueuedCommands, sCmd)
    ResponseWait = false
    ResendCommand()

  else
    print("Device disconnected, can't send the command")
  end
end

function ResendCommand()
 if #QueuedCommands >= 1 and ResponseWait == false then
    SendCommand(QueuedCommands[1])
    table.remove(QueuedCommands, 1)
  end
end



function GeneratePacket(data)
  
  if not (data and #data > 0) then return error("User Err: no data argument given or data is missing bytes - cannot generate packet") end
  
  -- insert the 'control' and 'group' bytes
  local command = {0x01, 0x00}

  -- clone the data into the local command, so we don't alter the original command table
  for i = 1, #data do table.insert(command, data[i]) end
  
  -- size is equal to number of bytes in message plus 2 for the checksum byte and size byte
  local size = #command + 2
  
  -- checksum is equal to XOR of all bytes excluding itself
  local checksum = size
  for i = 1, #command do
    checksum = checksum ~ command[i]
  end
  
  -- insert the 'size' and 'checksum' bytes
  table.insert(command, 1, size)
  table.insert(command, checksum)
  
  --generate the command packet
  local packet = ""
  local printout = ""
  local hex_string = ""
  
  for i = 1, #command do
    packet = packet..string.char(command[i])
    printout = printout..string.format("[%02X]", command[i])
    hex_string = hex_string .. string.format("\\x%02X", packet:byte(i))
  end
  --print(string.format("Sending Packet: %s", printout))
  print("Sending Packet: "..hex_string)

  --return complete packet
  return packet
end


-- Function to add entries to the Debug Output---------------------------------------------------------------------------------
function AddToDebug (Direction, Entry)
  StringContruction = ""

  LengthOfString = string.len(Entry)
  for i = 1,LengthOfString do
    StringContruction = StringContruction..Convert(string.sub(Entry,i,i))
  end

  --Format Debug text to appear correctly ---------------------------------------------------------------------
  StringContruction = os.date("%Y-%m-%d %X").." ["..Direction.."] "..StringContruction
  DebugText = StringContruction

  print(DebugText)
end 

-- Conversion of all characters in the Debug Window -------------------------------------------------------
function Convert(Character)
  for i = 0x00, 0xff do
    if Character == string.char(i) then
      Character = "\\x"..string.format("%02X",i)
    end
  end 
  return Character
end



Controls["Connect"].EventHandler = Connect
Controls["IP Address"].EventHandler = Connect

Initialize()

Connect()


----------------------------------------- TEMPORARY - Used to Assist Build Script ----------------------------------------- 
--[[
-- Get Checksum
-- Define the message bytes

local message = {0x06, 0x01, 0x00, 0x3A, 0x06, }
-- Initialize the checksum variable
local checksum = 0
-- Perform XOR on each byte in the message
for i, byte in ipairs(message) do
    checksum = checksum ~ byte
end
-- Print the calculated checksum
print(string.format("Checksum: 0x%02X", checksum))


for i=1,#Controls.SendCommand do
  Controls.SendCommand[i].EventHandler = function()
    if i == 1 then
      SendCommand(GetCommands.getINPUT_SOURCE)
    elseif i == 2 then 
      SendCommand(GetCommands.getVIDEO_PARAMETERS)
    elseif i == 3 then 
      SendCommand(GetCommands.getNUMBER_OF_INPUT_SOURCES)
    elseif i == 4 then
      SendCommand(GetCommands.getPLATFORM_VERSION)
    elseif i == 5 then
      SendCommand(GetCommands.getPOWER_STATE)
    end
  end
end
]]--

-----------------------------------------------------------------------------

end